{"version":3,"sources":["webpack:///node_modules/@biesbjerg/ngx-translate-extract-marker/__ivy_ngcc__/fesm2015/biesbjerg-ngx-translate-extract-marker.js","webpack:///src/app/services/dispatcher-asset-mode/dispatcher-asset-mode.service.ts","webpack:///src/app/enums/BatchExecState.ts","webpack:///src/app/enums/ExecContextState.ts","webpack:///src/app/guards/role-route.guard.ts","webpack:///src/app/enums/DispatcherAssetMode.ts","webpack:///src/app/enums/LoadStates.ts","webpack:///src/app/helpers/state.ts"],"names":["marker","key","DispatcherAssetModeService","value","local","replicated","source","BatchExecState","ExecContextState","RoleRouteGuard","authenticationService","router","route","state","production","console","groupCollapsed","url","log","convertRolesToString","data","requiredRoles","user","username","authorities","map","v","authority","groupEnd","check","roles","getUserRole","forEach","role","has","DispatcherAssetMode","LoadStates","show","loading","empty","wait","firstLoading"],"mappings":"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","file":"common-es5.js","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @template T\n * @param {?} key\n * @return {?}\n */\nfunction marker(key) {\n    return key;\n}\n\nexport { marker };\n\n//# sourceMappingURL=biesbjerg-ngx-translate-extract-marker.js.map","import { Injectable } from '@angular/core';\r\nimport { DispatcherAssetMode } from '@src/app/enums/DispatcherAssetMode';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class DispatcherAssetModeService {\r\n\r\n    constructor() { }\r\n\r\n    isLocal(value: DispatcherAssetMode) {\r\n        if (value === DispatcherAssetMode.local) { return true }\r\n        return false;\r\n    }\r\n    isReplicated(value: DispatcherAssetMode) {\r\n        if (value === DispatcherAssetMode.replicated) { return true }\r\n        return false;\r\n    }\r\n    isSource(value: DispatcherAssetMode) {\r\n        if (value === DispatcherAssetMode.source) { return true }\r\n        return false;\r\n    }\r\n}\r\n","export enum BatchExecState {\r\n    Error = -1,\r\n    Unknown = 0,\r\n    Stored = 1,\r\n    Preparing = 2,\r\n    Processing = 3,\r\n    Finished = 4,\r\n    Archived = 5\r\n}","export enum ExecContextState {\r\n    ERROR = 'ERROR',          // some error in configuration\r\n    UNKNOWN = 'UNKNOWN',        // unknown state\r\n    NONE = 'NONE',            // just created execContext\r\n    PRODUCING = 'PRODUCING',       // producing was just started\r\n    PRODUCED = 'PRODUCED',        // producing was finished\r\n    STARTED = 'STARTED',         // started\r\n    STOPPED = 'STOPPED',         // stopped\r\n    FINISHED = 'FINISHED',        // finished\r\n    DOESNT_EXIST = 'DOESNT_EXIST',    // doesn't exist. this state is needed at processor side to reconcile list of tasks\r\n}","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { environment } from '@src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthenticationService, Role } from '../services/authentication';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class RoleRouteGuard implements CanActivate {\r\n    constructor(\r\n        private authenticationService: AuthenticationService,\r\n        private router: Router,\r\n    ) { }\r\n    canActivate(\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n        if (!environment.production) {\r\n            console.groupCollapsed('%c%s', 'color:orange;', state.url);\r\n            console.log('%c%s', 'color:blue;',\r\n                'requiredRoles: ',\r\n                this.authenticationService.convertRolesToString(route.data.requiredRoles)\r\n            );\r\n            console.log(\r\n                '%c%s', 'color:blue;',\r\n                this.authenticationService.user.username + ': ',\r\n                this.authenticationService.convertRolesToString(\r\n                    this.authenticationService.user?.authorities?.map(v => v.authority)\r\n                )\r\n            );\r\n            console.groupEnd();\r\n        }\r\n\r\n        let check: boolean = false;\r\n        const roles: Set<Role> = this.authenticationService.getUserRole();\r\n        (route.data?.requiredRoles as Array<Role>)?.forEach(role => {\r\n            if (roles.has(role)) {\r\n                check = true;\r\n            }\r\n        });\r\n        return check;\r\n    }\r\n}\r\n","export enum DispatcherAssetMode {\r\n    local = 'local',\r\n    source = 'source',\r\n    replicated = 'replicated'\r\n}","export enum LoadStates {\r\n    show,\r\n    loading,\r\n    empty,\r\n    wait,\r\n    firstLoading\r\n}","const state: any = {\r\n    show: 'show',\r\n    loading: 'loading',\r\n    empty: 'empty',\r\n    wait: 'wait',\r\n    firstLoading: 'firstLoading'\r\n};\r\n\r\nexport { state };"]}