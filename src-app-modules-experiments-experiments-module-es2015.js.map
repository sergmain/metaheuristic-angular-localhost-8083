{"version":3,"sources":["./src/app/modules/experiments/experiment-state/experiment-state.component.ts","./src/app/modules/experiments/experiment-state/experiment-state.component.html","./src/app/services/experiments/experiments.service.ts","./src/app/modules/experiments/experiments/experiments.component.ts","./src/app/modules/experiments/experiments/experiments.component.html","./src/app/modules/experiments/experiments.module.ts","./src/app/modules/experiments/experiment-edit/experiment-edit.component.ts","./src/app/modules/experiments/experiment-edit/experiment-edit.component.html","./src/app/modules/experiments/experiment-add/experiment-add.component.ts","./src/app/modules/experiments/experiment-add/experiment-add.component.html"],"names":[],"mappings":"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","file":"src-app-modules-experiments-experiments-module-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'experiment-state',\r\n    templateUrl: './experiment-state.component.html',\r\n    styleUrls: ['./experiment-state.component.sass']\r\n})\r\nexport class ExperimentStateComponent implements OnInit {\r\n    sourceCodeId: string;\r\n    execContextId: string;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.sourceCodeId = this.activatedRoute.snapshot.paramMap.get('sourceCodeId');\r\n        this.execContextId = this.activatedRoute.snapshot.paramMap.get('execContextId');\r\n    }\r\n}\r\n","<ct-state-of-tasks [sourceCodeId]=\"sourceCodeId\" [execContextId]=\"execContextId\"></ct-state-of-tasks>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '@src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { generateFormData } from '@src/app/helpers/generateFormData';\r\nimport { ExperimentApiData } from './ExperimentApiData';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { SimpleExperiment } from './SimpleExperiment';\r\nimport { SourceCodeUidsForCompany } from '../source-codes/SourceCodeUidsForCompany';\r\n\r\nconst url = (s: string): string => `${environment.baseUrl}dispatcher/experiment${s}`;\r\n\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExperimentsService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    // @GetMapping(\"/experiments\")\r\n    // public ExperimentApiData.ExperimentsResult getExperiments(@PageableDefault(size = 5) Pageable pageable) {\r\n    //     return experimentTopLevelService.getExperiments(pageable);\r\n    // }\r\n    getExperiments(page: string): Observable<ExperimentApiData.ExperimentsResult> {\r\n        return this.http.get<ExperimentApiData.ExperimentsResult>(url(`/experiments`), { params: { page } });\r\n    }\r\n\r\n\r\n    // @GetMapping(value = \"/experiment/{id}\")\r\n    // public ExperimentApiData.ExperimentResult getExperiment(@PathVariable Long id) {\r\n    //     return experimentTopLevelService.getExperimentWithoutProcessing(id);\r\n    // }\r\n    getExperiment(id: string): Observable<ExperimentApiData.ExperimentResult> {\r\n        return this.http.get<ExperimentApiData.ExperimentResult>(url(`/experiment/${id}`));\r\n    }\r\n\r\n\r\n    // @GetMapping(value = \"/experiment-add\")\r\n    // public SourceCodeData.SourceCodeUidsForCompany experimentAdd(Authentication authentication) {\r\n    //     DispatcherContext context = userContextService.getContext(authentication);\r\n    //     SourceCodeData.SourceCodeUidsForCompany codes = new SourceCodeData.SourceCodeUidsForCompany();\r\n    //     List<String> uids = dispatcherParamsService.getExperiments();\r\n    //     codes.items = sourceCodeSelectorService.filterSourceCodes(context, uids);\r\n    //     return codes;\r\n    // }\r\n    experimentAdd(): Observable<SourceCodeUidsForCompany> {\r\n        return this.http.get<SourceCodeUidsForCompany>(url(`/experiment-add`));\r\n    }\r\n\r\n\r\n    // @GetMapping(value = \"/experiment-edit/{id}\")\r\n    // public ExperimentApiData.ExperimentsEditResult edit(@PathVariable Long id) {\r\n    //     return experimentTopLevelService.editExperiment(id);\r\n    // }\r\n    edit(id: string): Observable<ExperimentApiData.ExperimentsEditResult> {\r\n        return this.http.get<ExperimentApiData.ExperimentsEditResult>(url(`/experiment-edit/${id}`));\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-add-commit\")\r\n    // public OperationStatusRest addFormCommit(String sourceCodeUid, String name, String code, String description, Authentication authentication) {\r\n    //     DispatcherContext context = userContextService.getContext(authentication);\r\n    //     return experimentTopLevelService.addExperimentCommit(sourceCodeUid, name, code, description, context);\r\n    // }\r\n    addFormCommit(sourceCodeUid: string, name: string, code: string, description: string): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(\r\n            url(`/experiment-add-commit`),\r\n            generateFormData({\r\n                sourceCodeUid, name, code, description\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-edit-commit\")\r\n    // public OperationStatusRest editFormCommit(@RequestBody ExperimentApiData.SimpleExperiment simpleExperiment) {\r\n    //     return experimentTopLevelService.editExperimentCommit(simpleExperiment);\r\n    // }\r\n    editFormCommit(simpleExperiment: SimpleExperiment): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(url(`/experiment-edit-commit`), simpleExperiment);\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-delete-commit\")\r\n    // public OperationStatusRest deleteCommit(Long id) {\r\n    //     return experimentTopLevelService.experimentDeleteCommit(id);\r\n    // }\r\n    deleteCommit(id: string): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(url(`/experiment-delete-commit`), generateFormData({ id }));\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-clone-commit\")\r\n    // public OperationStatusRest experimentCloneCommit(Long id, Authentication authentication) {\r\n    //     DispatcherContext context = userContextService.getContext(authentication);\r\n    //     return experimentTopLevelService.experimentCloneCommit(id, context);\r\n    // }\r\n    experimentCloneCommit(id: string): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(url(`/experiment-clone-commit`), generateFormData({ id }));\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-target-state/{state}/{experimentId}\")\r\n    // public OperationStatusRest execContextTargetExecState(\r\n    //         @PathVariable Long experimentId, @PathVariable String state, Authentication authentication) {\r\n    //     DispatcherContext context = userContextService.getContext(authentication);\r\n    //     OperationStatusRest operationStatusRest = experimentTopLevelService.changeExecContextState(state, experimentId, context);\r\n    //     return operationStatusRest;\r\n    // }\r\n    execContextTargetExecState(experimentId: string, state: string): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(url(`/experiment-target-state/${state}/${experimentId}`), {});\r\n    }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ConfirmationDialogMethod } from '@app/components/app-dialog-confirmation/app-dialog-confirmation.component';\r\nimport { ExecContextState } from '@src/app/enums/ExecContextState';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { ExperimentApiData } from '@src/app/services/experiments/ExperimentApiData';\r\nimport { ExperimentsService } from '@src/app/services/experiments/experiments.service';\r\n\r\n@Component({\r\n    selector: 'experiments-view',\r\n    templateUrl: './experiments.component.html',\r\n    styleUrls: ['./experiments.component.scss']\r\n})\r\n\r\nexport class ExperimentsComponent extends UIStateComponent implements OnInit {\r\n    ExecContextState: typeof ExecContextState = ExecContextState;\r\n    experimentsResult: ExperimentApiData.ExperimentsResult;\r\n    dataSource: MatTableDataSource<ExperimentApiData.ExperimentResult> = new MatTableDataSource<ExperimentApiData.ExperimentResult>([]);\r\n    columnsToDisplay: string[] = ['id', 'name', 'createdOn', 'code', 'description', 'execState', 'bts'];\r\n\r\n    constructor(\r\n        readonly dialog: MatDialog,\r\n        private experimentsService: ExperimentsService,\r\n        readonly authenticationService: AuthenticationService\r\n\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.updateTable(0);\r\n    }\r\n\r\n    updateTable(page: number): void {\r\n        this.setIsLoadingStart();\r\n        this.experimentsService\r\n            .getExperiments(page.toString())\r\n            .subscribe({\r\n                next: experimentsResult => {\r\n                    this.experimentsResult = experimentsResult;\r\n                    this.dataSource = new MatTableDataSource(experimentsResult.items.content || []);\r\n                },\r\n                complete: () => {\r\n                    this.setIsLoadingEnd();\r\n                }\r\n            });\r\n    }\r\n\r\n    @ConfirmationDialogMethod({\r\n        question: (experiment: ExperimentApiData.ExperimentResult): string =>\r\n            `Do you want to delete Experiment\\xa0#${experiment.experiment.id}`,\r\n        rejectTitle: 'Cancel',\r\n        resolveTitle: 'Delete'\r\n    })\r\n    delete(experiment: ExperimentApiData.ExperimentResult): void {\r\n        this.experimentsService\r\n            .deleteCommit(experiment.experiment.id.toString())\r\n            .subscribe({\r\n                complete: () => this.updateTable(this.experimentsResult.items.number)\r\n            });\r\n    }\r\n\r\n    clone(element: ExperimentApiData.ExperimentResult): void {\r\n        this.experimentsService\r\n            .experimentCloneCommit(element.experiment.id?.toString())\r\n            .subscribe({\r\n                complete: () => this.updateTable(this.experimentsResult.items.number)\r\n            });\r\n    }\r\n\r\n    produce(experiment: ExperimentApiData.ExperimentResult): void {\r\n        this.execContextTargetExecState(experiment.experiment.id.toString(), ExecContextState.PRODUCED.toLowerCase());\r\n    }\r\n\r\n    start(experiment: ExperimentApiData.ExperimentResult): void {\r\n        this.execContextTargetExecState(experiment.experiment.id.toString(), ExecContextState.STARTED.toLowerCase());\r\n    }\r\n\r\n    stop(experiment: ExperimentApiData.ExperimentResult): void {\r\n        this.execContextTargetExecState(experiment.experiment.id.toString(), ExecContextState.STOPPED.toLowerCase());\r\n    }\r\n\r\n    private execContextTargetExecState(id: string, state: string): void {\r\n        this.experimentsService\r\n            .execContextTargetExecState(id, state)\r\n            .subscribe({\r\n                complete: () => this.updateTable(this.experimentsResult.items.number)\r\n            });\r\n    }\r\n\r\n    nextPage(): void {\r\n        this.updateTable(this.experimentsResult.items.number + 1);\r\n    }\r\n\r\n    prevPage(): void {\r\n        this.updateTable(this.experimentsResult.items.number - 1);\r\n    }\r\n\r\n}","<ct-section *ngIf=\"experimentsResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-heading>Experiments</ct-heading>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-table [isWaiting]=\"isLoading\">\r\n                <table class=\"mat-table\" mat-table=\"mat-table\" [dataSource]=\"dataSource\">\r\n                    <ng-container matColumnDef=\"id\">\r\n                        <th mat-header-cell *matHeaderCellDef>Id</th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.experiment.id}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"name\">\r\n                        <th mat-header-cell *matHeaderCellDef>Name</th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.experiment.name}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"createdOn\">\r\n                        <th mat-header-cell *matHeaderCellDef>Created on</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> {{el.experiment.createdOn | date:'HH:mm:ss, MMM d, yyyy'}}\r\n                        </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"execState\">\r\n                        <th mat-header-cell *matHeaderCellDef>Exec State</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> {{el.experiment.execState}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"code\">\r\n                        <th mat-header-cell *matHeaderCellDef>Code</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> {{el.experiment.code}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"description\">\r\n                        <th mat-header-cell *matHeaderCellDef>Desc</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> {{el.experiment.description}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"bts\">\r\n                        <th mat-header-cell *matHeaderCellDef> </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ng-container [ngTemplateOutlet]=\"actionsTemplate\" [ngTemplateOutletContext]=\"{element:el}\">\r\n                            </ng-container>\r\n                        </td>\r\n                    </ng-container>\r\n\r\n                    <tr mat-header-row=\"mat-header-row\" *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n                    <tr mat-row=\"mat-row\" *matRowDef=\"let row; columns: columnsToDisplay;\"></tr>\r\n                </table>\r\n            </ct-table>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n    <ct-section-footer>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-table-pagination [pageableDefault]=\"experimentsResult.items\" [globalDisable]=\"false\"\r\n                        (next)=\"nextPage()\" (prev)=\"prevPage()\"></ct-table-pagination>\r\n                </ct-flex-item>\r\n                <ct-flex-item>\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>\r\n\r\n\r\n\r\n\r\n\r\n<ng-template #actionsTemplate let-element=\"element\">\r\n    <ct-flex justify-content=\"flex-end\" gap=\"9px\">\r\n        <ct-flex-item *ngIf=\"element.experiment.execState === ExecContextState.NONE\">\r\n            <button mat-flat-button color=\"primary\" size=\"forTableRow\" (click)=\"produce(element)\">Produce</button>\r\n        </ct-flex-item>\r\n        <ct-flex-item\r\n            *ngIf=\"element.experiment.execState === ExecContextState.PRODUCED || element.experiment.execState === ExecContextState.STOPPED\">\r\n            <button mat-flat-button color=\"primary\" size=\"forTableRow\" (click)=\"start(element)\">Start</button>\r\n        </ct-flex-item>\r\n        <ct-flex-item *ngIf=\"element.experiment.execState === ExecContextState.STARTED\">\r\n            <button mat-flat-button color=\"primary\" size=\"forTableRow\" (click)=\"stop(element)\">Stop</button>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <a mat-flat-button [routerLink]=\"[element.experiment.id, 'edit']\" color=\"primary\"\r\n                size=\"forTableRow\">Edit</a>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <a mat-flat-button\r\n                [routerLink]=\"[element.experiment.id,'source-code',element.experiment.sourceCodeId,'exec-context',element.experiment.execContextId, 'state']\"\r\n                color=\"primary\" size=\"forTableRow\">Task\r\n                State</a>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <button mat-flat-button size=\"forTableRow\" color=\"primary\" (click)=\"clone(element)\">Clone</button>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <button mat-flat-button size=\"forTableRow\" color=\"warn\" (click)=\"delete(element)\">\r\n                <mat-icon>delete</mat-icon>\r\n            </button>\r\n        </ct-flex-item>\r\n    </ct-flex>\r\n</ng-template>\r\n\r\n\r\n\r\n\r\n\r\n<ng-template #addButtonTemplate>\r\n    <button mat-flat-button color=\"primary\" wide=\"wide\" [disabled]=\"isLoading\" routerLink=\"add\">Add\r\n        Experiment</button>\r\n</ng-template>","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MaterialAppModule } from '@src/app/ngmaterial.module';\r\nimport { ExperimentAddComponent } from './experiment-add/experiment-add.component';\r\nimport { ExperimentEditComponent } from './experiment-edit/experiment-edit.component';\r\nimport { ExperimentsComponent } from './experiments/experiments.component';\r\nimport { CtModule } from '../ct/ct.module';\r\nimport { ExperimentStateComponent } from './experiment-state/experiment-state.component';\r\n\r\n\r\n\r\nexport const ExperimentsRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ExperimentsComponent\r\n    },\r\n    {\r\n        path: 'add',\r\n        component: ExperimentAddComponent,\r\n        data: {\r\n            backConfig: ['../']\r\n        }\r\n    },\r\n    {\r\n        path: ':experimentId/edit',\r\n        component: ExperimentEditComponent,\r\n        data: {\r\n            backConfig: ['../', '../']\r\n        }\r\n    },\r\n    {\r\n        path: ':experimentId/source-code/:sourceCodeId/exec-context/:execContextId/state',\r\n        component: ExperimentStateComponent,\r\n        data: {\r\n            backConfig: ['../', '../', '../', '../', '../', '../']\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(ExperimentsRoutes)],\r\n    exports: [RouterModule],\r\n    declarations: []\r\n})\r\nexport class ExperimentsRoutingModule { }\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ExperimentsRoutingModule,\r\n        CtModule,\r\n        MaterialAppModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        TranslateModule.forChild({})\r\n    ],\r\n    declarations: [\r\n        ExperimentsComponent,\r\n        ExperimentAddComponent,\r\n        ExperimentEditComponent,\r\n        ExperimentStateComponent\r\n    ]\r\n})\r\nexport class ExperimentsModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { ExperimentApiData } from '@src/app/services/experiments/ExperimentApiData';\r\nimport { ExperimentsService } from '@src/app/services/experiments/experiments.service';\r\nimport { SimpleExperiment } from '@src/app/services/experiments/SimpleExperiment';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\n\r\n@Component({\r\n    selector: 'experiment-edit',\r\n    templateUrl: './experiment-edit.component.html',\r\n    styleUrls: ['./experiment-edit.component.scss']\r\n})\r\n\r\nexport class ExperimentEditComponent extends UIStateComponent implements OnInit {\r\n\r\n    experimentsEditResult: ExperimentApiData.ExperimentsEditResult;\r\n    operationStatusRest: OperationStatusRest;\r\n\r\n    simpleExperiment: SimpleExperiment = {\r\n        name: null,\r\n        description: null,\r\n        code: null,\r\n        id: null\r\n    };\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private experimentsService: ExperimentsService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        readonly authenticationService: AuthenticationService\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.setIsLoadingStart();\r\n        this.simpleExperiment.id = this.route.snapshot.paramMap.get('experimentId');\r\n        this.experimentsService\r\n            .edit(this.route.snapshot.paramMap.get('experimentId'))\r\n            .subscribe({\r\n                next: experimentsEditResult => {\r\n                    this.experimentsEditResult = experimentsEditResult;\r\n                    this.simpleExperiment.code = experimentsEditResult.simpleExperiment.code;\r\n                    this.simpleExperiment.description = experimentsEditResult.simpleExperiment.description;\r\n                    this.simpleExperiment.name = experimentsEditResult.simpleExperiment.name;\r\n                },\r\n                complete: () => {\r\n                    this.setIsLoadingEnd();\r\n                }\r\n            });\r\n    }\r\n\r\n    save(): void {\r\n        this.setIsLoadingStart();\r\n        this.experimentsService\r\n            .editFormCommit(this.simpleExperiment)\r\n            .subscribe({\r\n                next: operationStatusRest => this.operationStatusRest = operationStatusRest,\r\n                complete: () => this.setIsLoadingEnd()\r\n            });\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../../'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n}","<ct-cols *ngIf=\"experimentsEditResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>Experiment #{{simpleExperiment.id}}</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Name</mat-label>\r\n                        <input matInput=\"matInput\" autocomplete=\"off\" [(ngModel)]=\"simpleExperiment.name\" />\r\n                        <mat-hint>This is a required field. </mat-hint>\r\n                    </mat-form-field>\r\n                </ct-section-body-row>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Description</mat-label>\r\n                        <textarea matInput=\"matInput\" cdkTextareaAutosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"5\"\r\n                            [(ngModel)]=\"simpleExperiment.description\"></textarea>\r\n                        <mat-hint>This is a required field. </mat-hint>\r\n                    </mat-form-field>\r\n                </ct-section-body-row>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Experiment code</mat-label>\r\n                        <textarea matInput=\"matInput\" cdkTextareaAutosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"5\"\r\n                            [(ngModel)]=\"simpleExperiment.code\"></textarea>\r\n                        <mat-hint>This is a required field. </mat-hint>\r\n                    </mat-form-field>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\" title=\"Cancel\">\r\n                                Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" (click)=\"save()\" color=\"primary\"\r\n                                [disabled]=\"isLoading\" title=\"Save\">Save</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ExperimentsService } from '@app/services/experiments/experiments.service';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { SourceCodeUidsForCompany } from '@src/app/services/source-codes/SourceCodeUidsForCompany';\r\n@Component({\r\n    selector: 'experiment-add',\r\n    templateUrl: './experiment-add.component.html',\r\n    styleUrls: ['./experiment-add.component.scss']\r\n})\r\n\r\nexport class ExperimentAddComponent implements OnInit {\r\n    form: FormGroup = new FormGroup({\r\n        sourceCodeUID: new FormControl('', [Validators.required, Validators.minLength(1)]),\r\n        name: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n        description: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n        experimentCode: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n    });\r\n    operationStatusRest: OperationStatusRest;\r\n    sourceCodeUidsForCompany: SourceCodeUidsForCompany;\r\n\r\n    constructor(\r\n        private experimentsService: ExperimentsService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.experimentsService\r\n            .experimentAdd()\r\n            .subscribe({\r\n                next: (sourceCodeUidsForCompany) => {\r\n                    this.sourceCodeUidsForCompany = sourceCodeUidsForCompany;\r\n                }\r\n            });\r\n    }\r\n\r\n    cancel(): void {\r\n        this.router.navigate(['../'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    create(): void {\r\n        this.experimentsService\r\n            .addFormCommit(\r\n                this.form.value.sourceCodeUID,\r\n                this.form.value.name,\r\n                this.form.value.description,\r\n                this.form.value.experimentCode\r\n            )\r\n            .subscribe({\r\n                next: (operationStatusRest) => {\r\n                    this.operationStatusRest = operationStatusRest;\r\n                    if (operationStatusRest.status === OperationStatus.OK) {\r\n                        this.form.reset();\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}","<ct-cols>\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>New Experiment</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <form [formGroup]=\"form\" novalidate=\"novalidate\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>List of Uids of source codes</mat-label>\r\n                            <mat-select formControlName=\"sourceCodeUID\">\r\n                                <div *ngFor=\"let sourceCode of sourceCodeUidsForCompany?.items\">\r\n                                    <mat-option [value]=\"sourceCode.uid\">{{sourceCode.uid}}</mat-option>\r\n                                </div>\r\n                            </mat-select>\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Name</mat-label>\r\n                            <input matInput=\"matInput\" formControlName=\"name\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Description</mat-label>\r\n                            <textarea matInput=\"matInput\" formControlName=\"description\"\r\n                                cdkTextareaAutosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"5\"></textarea>\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Experiment code</mat-label>\r\n                            <textarea matInput=\"matInput\" formControlName=\"experimentCode\"\r\n                                cdkTextareaAutosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"5\"></textarea>\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                    </form>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"cancel()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" (click)=\"create()\" color=\"primary\"\r\n                                [disabled]=\"form.invalid\">Create</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>"],"sourceRoot":"webpack:///"}