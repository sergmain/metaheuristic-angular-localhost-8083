{"version":3,"sources":["webpack:///src/app/modules/dispatcher/dispatcher-index/dispatcher-index.component.ts","webpack:///src/app/modules/dispatcher/dispatcher-index/dispatcher-index.component.html","webpack:///src/app/modules/dispatcher/dispatcher-root/dispatcher-root.component.ts","webpack:///src/app/modules/dispatcher/dispatcher-root/dispatcher-root.component.html","webpack:///src/app/modules/dispatcher/dispatcher.module.ts"],"names":["DispatcherIndexComponent","DispatcherRootComponent","authenticationService","router","settingsService","routeReuseStrategy","shouldReuseRoute","subscribeSubscription","events","subscribe","event","settings","sidenavOpened","sidenav","unsubscribeSubscriptions","commonRequiredRoles","MasterAssetManager","MasterAdmin","MasterOpertator","MasterSupport","Admin","Data","Manager","DispatcherRoutes","path","canActivate","component","data","requiredRoles","children","loadChildren","then","m","SourceCodeModule","section","GlobalVariablesModule","FunctionsModule","ProcessorsModule","AccountsModule","CompnyModule","DispatcherRoutingModule","forChild","DispatcherModule"],"mappings":"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","file":"src-app-modules-dispatcher-dispatcher-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'dispatcher-index',\r\n  templateUrl: './dispatcher-index.component.html',\r\n  styleUrls: ['./dispatcher-index.component.sass']\r\n})\r\nexport class DispatcherIndexComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","<ct-section>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-env-msg-outer propertyName=\"brandingMsg\"></ct-env-msg-outer>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n</ct-section>","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { Settings } from '@src/app/services/settings/Settings';\r\nimport { SettingsService, SettingsServiceEventChange } from '@src/app/services/settings/settings.service';\r\n\r\n@Component({\r\n    selector: 'dispatcher-root',\r\n    templateUrl: './dispatcher-root.component.html',\r\n    styleUrls: ['./dispatcher-root.component.sass']\r\n})\r\nexport class DispatcherRootComponent extends UIStateComponent implements OnInit, OnDestroy {\r\n    settings: Settings;\r\n    sidenavOpened: boolean;\r\n\r\n    constructor(\r\n        public authenticationService: AuthenticationService,\r\n        private router: Router,\r\n        private settingsService: SettingsService\r\n    ) {\r\n        super(authenticationService);\r\n        // повторным кликом перезагружаем страницу\r\n        this.router.routeReuseStrategy.shouldReuseRoute = () => false;\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subscribeSubscription(\r\n            this.settingsService.events.subscribe(event => {\r\n                if (event instanceof SettingsServiceEventChange) {\r\n                    this.settings = event.settings;\r\n                    this.sidenavOpened = event.settings.sidenav;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribeSubscriptions();\r\n    }\r\n}\r\n","<mat-sidenav-container>\r\n    <mat-sidenav mode=\"side\" [opened]=\"sidenavOpened\">\r\n        <div class=\"navigation\">\r\n\r\n            <button *ngIf=\"\r\n                    isRole.MasterAssetManager ||\r\n                    isRole.Admin ||\r\n                    isRole.Data ||\r\n                    isRole.Manager\r\n                \" \r\n                mat-button  \r\n                routerLinkActive=\"active\" \r\n                routerLink=\"/dispatcher/source-codes\">\r\n                    {{ 'dispatcher.SourceCodes' | translate }}\r\n            </button>\r\n\r\n            <button *ngIf=\"\r\n                    isRole.Admin || \r\n                    isRole.Data\r\n                \" \r\n                mat-button \r\n                routerLinkActive=\"active\"\r\n                routerLink=\"/dispatcher/global-variables\">\r\n                    {{ 'dispatcher.Variables' | translate }}\r\n            </button>\r\n\r\n            <button *ngIf=\"\r\n                    isRole.MasterAssetManager ||\r\n                    isRole.Admin ||\r\n                    isRole.Data\r\n                \" \r\n                mat-button \r\n                routerLinkActive=\"active\"\r\n                routerLink=\"/dispatcher/functions\">\r\n                    {{ 'dispatcher.Functions' | translate }}\r\n            </button>\r\n\r\n            <button *ngIf=\"\r\n                    isRole.Admin ||\r\n                    isRole.Data\r\n                \" \r\n                mat-button \r\n                routerLinkActive=\"active\"\r\n                routerLink=\"/dispatcher/processors\">\r\n                    {{ 'dispatcher.Processors' | translate }}\r\n            </button>\r\n\r\n            <button *ngIf=\"\r\n                    isRole.Admin\r\n                \" \r\n                mat-button \r\n                routerLinkActive=\"active\"\r\n                routerLink=\"/dispatcher/accounts\">\r\n                    {{ 'dispatcher.Accounts' | translate }}\r\n            </button>\r\n\r\n            <button *ngIf=\"\r\n                    isRole.MasterAdmin ||\r\n                    isRole.MasterOperator ||\r\n                    isRole.MasterSupport\r\n                \" \r\n                mat-button \r\n                routerLinkActive=\"active\"\r\n                routerLink=\"/dispatcher/company/companies\">\r\n                    {{ 'dispatcher.Company' | translate }}\r\n            </button>\r\n\r\n        </div>\r\n    </mat-sidenav>\r\n    <mat-sidenav-content>\r\n        <ct-content>\r\n            <router-outlet></router-outlet>\r\n            <ct-back-button></ct-back-button>\r\n            <copy-right></copy-right>\r\n        </ct-content>\r\n    </mat-sidenav-content>\r\n</mat-sidenav-container>","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DispatcherIndexComponent } from './dispatcher-index/dispatcher-index.component';\r\nimport { DispatcherRootComponent } from './dispatcher-root/dispatcher-root.component';\r\nimport { MaterialAppModule } from '@src/app/ngmaterial.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { CtModule } from '../ct/ct.module';\r\nimport { CopyRightModule } from '../copy-right/copy-right.module';\r\nimport { Role } from '@src/app/services/authentication';\r\nimport { RoleRouteGuard } from '@src/app/guards/role-route.guard';\r\n\r\n\r\nconst commonRequiredRoles: Role[] = [\r\n    Role.MasterAssetManager,\r\n    Role.MasterAdmin,\r\n    Role.MasterOpertator,\r\n    Role.MasterSupport,\r\n    Role.Admin,\r\n    Role.Data,\r\n    Role.Manager,\r\n];\r\n\r\n\r\n\r\nexport const DispatcherRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        canActivate: [RoleRouteGuard],\r\n        component: DispatcherRootComponent,\r\n        data: {\r\n            requiredRoles: commonRequiredRoles\r\n        },\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: DispatcherIndexComponent\r\n            }]\r\n    },\r\n    {\r\n        path: 'source-codes',\r\n        canActivate: [RoleRouteGuard],\r\n        component: DispatcherRootComponent,\r\n        loadChildren: () => import('@src/app/modules/source-codes/source-codes.module').then(m => m.SourceCodeModule),\r\n        data: {\r\n            requiredRoles: [Role.MasterAssetManager, Role.Admin, Role.Data, Role.Manager],\r\n            section: 'source-codes'\r\n        },\r\n    },\r\n    {\r\n        path: 'global-variables',\r\n        canActivate: [RoleRouteGuard],\r\n        component: DispatcherRootComponent,\r\n        loadChildren: () => import('@src/app/modules/global-variables/global-variables.module').then(m => m.GlobalVariablesModule),\r\n        data: {\r\n            requiredRoles: [Role.Admin, Role.Data],\r\n            section: 'global-variables'\r\n        }\r\n    },\r\n    {\r\n        path: 'functions',\r\n        canActivate: [RoleRouteGuard],\r\n        component: DispatcherRootComponent,\r\n        loadChildren: () => import('@src/app/modules/functions/functions.module').then(m => m.FunctionsModule),\r\n        data: {\r\n            requiredRoles: [Role.MasterAssetManager, Role.Admin, Role.Data],\r\n            section: 'functions'\r\n        }\r\n    },\r\n    {\r\n        path: 'processors',\r\n        canActivate: [RoleRouteGuard],\r\n        component: DispatcherRootComponent,\r\n        loadChildren: () => import('src/app/modules/processors/processors.module').then(m => m.ProcessorsModule),\r\n        data: {\r\n            requiredRoles: [Role.Admin, Role.Data],\r\n            section: 'processors'\r\n        }\r\n    },\r\n    {\r\n        path: 'accounts',\r\n        canActivate: [RoleRouteGuard],\r\n        component: DispatcherRootComponent,\r\n        loadChildren: () => import('src/app/modules/accounts/accounts.module').then(m => m.AccountsModule),\r\n        data: {\r\n            requiredRoles: [Role.Admin],\r\n            section: 'accounts'\r\n        }\r\n    },\r\n    {\r\n        path: 'company',\r\n        canActivate: [RoleRouteGuard],\r\n        component: DispatcherRootComponent,\r\n        loadChildren: () => import('src/app/modules/company/company.module').then(m => m.CompnyModule),\r\n        data: {\r\n            requiredRoles: [Role.MasterAdmin, Role.MasterOpertator, Role.MasterSupport],\r\n            section: 'company'\r\n        }\r\n    }\r\n];\r\n\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(DispatcherRoutes)],\r\n    exports: [RouterModule],\r\n})\r\nexport class DispatcherRoutingModule { }\r\n\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DispatcherRootComponent,\r\n        DispatcherIndexComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        DispatcherRoutingModule,\r\n\r\n        CtModule,\r\n        CopyRightModule,\r\n        MaterialAppModule,\r\n        TranslateModule.forChild({})\r\n    ]\r\n})\r\nexport class DispatcherModule { }\r\n"]}