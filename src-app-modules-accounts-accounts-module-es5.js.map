{"version":3,"sources":["webpack:///src/app/modules/accounts/account-edit-pass/account-edit-pass.component.ts","webpack:///src/app/modules/accounts/account-edit-pass/account-edit-pass.component.html","webpack:///src/app/modules/accounts/accounts/accounts.component.ts","webpack:///src/app/modules/accounts/accounts/accounts.component.html","webpack:///src/app/services/accounts/index.ts","webpack:///src/app/modules/accounts/accounts.module.ts","webpack:///src/app/modules/accounts/account-edit/account-edit.component.ts","webpack:///src/app/modules/accounts/account-edit/account-edit.component.html","webpack:///src/app/modules/accounts/account-access/account-access.component.ts","webpack:///src/app/modules/accounts/account-access/account-access.component.html","webpack:///src/app/modules/accounts/account-add/account-add.component.ts","webpack:///src/app/modules/accounts/account-add/account-add.component.html"],"names":["AccountEditPassComponent","route","router","accountsService","location","states","currentStates","Set","form","password","required","minLength","password2","control","group","value","notSame","add","firstLoading","getAccount","back","id","snapshot","paramMap","get","subscribe","response","account","wait","passwordEditFormCommit","toString","navigate","save","AccountsComponent","dispatcherAssetModeService","authenticationService","dataSource","columnsToDisplay","updateTable","page","setIsLoadingStart","accounts","next","accountsResult","content","complete","setIsLoadingEnd","number","AccountsRoutes","path","component","data","backConfig","AccountsRoutingModule","forChild","AccountsModule","AccountEditComponent","editFormCommit","publicName","enabled","AccountAccessComponent","isManager","isOperator","isBilling","isData","isAdmin","isServerRestAccess","roles","authorities","forEach","authority","push","includes","ROLE_MANAGER","ROLE_OPERATOR","ROLE_BILLING","ROLE_DATA","ROLE_ADMIN","ROLE_SERVER_REST_ACCESS","accountId","roleFormCommit","join","relativeTo","AccountAddComponent","username","addFormCommit","status","OK","unsubscribe","create"],"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","file":"src-app-modules-accounts-accounts-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AccountsService } from '@app/services/accounts/accounts.service';\r\nimport { LoadStates } from '@app/enums/LoadStates';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { SimpleAccount } from '@src/app/services/accounts';\r\n\r\n@Component({\r\n    selector: 'account-edit-pass',\r\n    templateUrl: './account-edit-pass.component.html',\r\n    styleUrls: ['./account-edit-pass.component.scss']\r\n})\r\n\r\nexport class AccountEditPassComponent implements OnInit {\r\n    readonly states = LoadStates;\r\n    currentStates = new Set();\r\n    response;\r\n    account: SimpleAccount;\r\n\r\n    form = new FormGroup({\r\n        password: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3)\r\n        ]),\r\n        password2: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            (control: FormControl): any => {\r\n                const group: FormGroup = this.form;\r\n                if (group) {\r\n                    return (group.value.password === control.value) ? null : {\r\n                        notSame: true\r\n                    };\r\n                }\r\n                return null;\r\n            }\r\n        ]),\r\n    });\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountsService: AccountsService,\r\n        private location: Location\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.currentStates.add(this.states.firstLoading);\r\n        this.getAccount();\r\n    }\r\n\r\n    back() {\r\n        this.location.back();\r\n    }\r\n\r\n    getAccount(): void {\r\n        const id = this.route.snapshot.paramMap.get('id');\r\n        this.accountsService\r\n            .getAccount(id)\r\n            .subscribe(\r\n                (response) => {\r\n                    this.account = response.account;\r\n                },\r\n                () => { },\r\n                () => {\r\n                    this.currentStates.delete(this.states.firstLoading);\r\n                }\r\n            );\r\n    }\r\n\r\n    save() {\r\n        this.currentStates.add(this.states.wait);\r\n        this.accountsService\r\n            .passwordEditFormCommit(this.account.id.toString(), this.form.value.password, this.form.value.password2)\r\n            .subscribe(\r\n                (response: any) => {\r\n                    this.router.navigate(['/dispatcher', 'accounts']);\r\n                },\r\n                () => { },\r\n                () => {\r\n                    this.currentStates.delete(this.states.wait);\r\n                }\r\n            );\r\n    }\r\n}","\r\n<ct-cols align-items=\"baseline\">\r\n  <ct-col size=\"6\">\r\n    <ct-section>\r\n      <ct-section-header>\r\n        <ct-section-header-row>\r\n          <ct-heading>Edit Account {{account ? account.username : ''}} ({{account ? account.publicName : ''}})</ct-heading>\r\n        </ct-section-header-row>\r\n      </ct-section-header>\r\n      <ct-section-body>\r\n        <ct-section-body-row>\r\n          <form [formGroup]=\"form\" novalidate=\"novalidate\">\r\n            <ct-section-content>\r\n              <mat-form-field appearance=\"outline\"> \r\n                <mat-label>Password</mat-label>\r\n                <input matInput=\"matInput\" type=\"password\" autocomplete=\"off\" formControlName=\"password\"/>\r\n              </mat-form-field>\r\n            </ct-section-content>\r\n            <ct-section-content>\r\n              <mat-form-field appearance=\"outline\"> \r\n                <mat-label>Password again</mat-label>\r\n                <input matInput=\"matInput\" type=\"password\" autocomplete=\"off\" formControlName=\"password2\"/>\r\n              </mat-form-field>\r\n            </ct-section-content>\r\n          </form>\r\n        </ct-section-body-row>\r\n      </ct-section-body>\r\n      <ct-section-footer>\r\n        <ct-section-footer-row>\r\n          <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n            <ct-flex-item>\r\n              <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\">Cancel</button>\r\n            </ct-flex-item>\r\n            <ct-flex-item>\r\n              <button mat-flat-button=\"mat-flat-button\" (click)=\"save()\" color=\"primary\" [disabled]=\"currentStates.has(states.wait) || form.invalid\">Save</button>\r\n            </ct-flex-item>\r\n          </ct-flex>\r\n        </ct-section-footer-row>\r\n      </ct-section-footer>\r\n    </ct-section>\r\n  </ct-col>\r\n  <ct-col size=\"6\">\r\n    <ct-section *ngIf=\"response\">\r\n      <ct-section-body>\r\n        <ct-section-body-row>\r\n          <p>STATUS: {{response.status}}</p>\r\n          <p *ngFor=\"let error of response.errorMessages; index as i; \">{{error}}</p>\r\n        </ct-section-body-row>\r\n      </ct-section-body>\r\n    </ct-section>\r\n  </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { AccountsService } from '@app/services/accounts/accounts.service';\r\nimport { DispatcherAssetMode } from '@src/app/enums/DispatcherAssetMode';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AccountsResult, SimpleAccount } from '@src/app/services/accounts';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { DispatcherAssetModeService } from '@src/app/services/dispatcher-asset-mode/dispatcher-asset-mode.service';\r\n\r\n@Component({\r\n    // tslint:disable-next-line: component-selector\r\n    selector: 'accounts-view',\r\n    templateUrl: './accounts.component.html',\r\n    styleUrls: ['./accounts.component.scss']\r\n})\r\n\r\nexport class AccountsComponent extends UIStateComponent implements OnInit {\r\n    dataSource = new MatTableDataSource<SimpleAccount>([]);\r\n    columnsToDisplay = ['id', 'isEnabled', 'login', 'publicName', 'createdOn', 'bts'];\r\n    accountsResult: AccountsResult;\r\n\r\n    constructor(\r\n        private accountsService: AccountsService,\r\n        public dispatcherAssetModeService: DispatcherAssetModeService,\r\n        readonly authenticationService: AuthenticationService\r\n    ) {\r\n        super(authenticationService)\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.updateTable(0);\r\n    }\r\n\r\n    updateTable(page: number) {\r\n        this.setIsLoadingStart()\r\n        this.accountsService\r\n            .accounts(page.toString())\r\n            .subscribe({\r\n                next: accountsResult => {\r\n                    this.accountsResult = accountsResult;\r\n                    this.dataSource = new MatTableDataSource(this.accountsResult.accounts.content || []);\r\n                },\r\n                complete: () => {\r\n                    this.setIsLoadingEnd()\r\n                }\r\n            })\r\n    }\r\n\r\n    nextPage() {\r\n        this.updateTable(this.accountsResult.accounts.number + 1);\r\n    }\r\n\r\n    prevPage() {\r\n        this.updateTable(this.accountsResult.accounts.number - 1);\r\n    }\r\n\r\n}","<ct-section *ngIf=\"accountsResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-heading>\r\n                Accounts\r\n            </ct-heading>\r\n        </ct-section-header-row>\r\n\r\n        <ng-container *ngIf=\"dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n            <ct-section-header-row>\r\n                <ct-alert theme=\"info\">Creating and editing of accounts are disabled, assetMode is 'replicated'.\r\n                </ct-alert>\r\n            </ct-section-header-row>\r\n        </ng-container>\r\n    </ct-section-header>\r\n\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-table [isWaiting]=\"isLoading\">\r\n                <table class=\"mat-table\" mat-table [dataSource]=\"dataSource\">\r\n                    <ng-container matColumnDef=\"id\">\r\n                        <th mat-header-cell *matHeaderCellDef>ID </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.id}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"isEnabled\">\r\n                        <th mat-header-cell *matHeaderCellDef>Is enabled </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.enabled ? 'Yes':'No'}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"login\">\r\n                        <th mat-header-cell *matHeaderCellDef>Login </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.username}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"publicName\">\r\n                        <th mat-header-cell *matHeaderCellDef>Public name </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.publicName}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"createdOn\">\r\n                        <th mat-header-cell *matHeaderCellDef>Created On </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            {{el.createdOn | date:'HH:mm:ss, MMM&nbsp;d,&nbsp;yyyy'}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"bts\">\r\n                        <th mat-header-cell *matHeaderCellDef> </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ng-container *ngIf=\"!dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n                                <ct-flex justify-content=\"flex-end\" gap=\"9px\">\r\n                                    <ct-flex-item>\r\n                                        <button mat-flat-button size=\"forTableRow\"\r\n                                            [routerLink]=\"['/dispatcher/accounts/edit/',el.id]\" color=\"primary\">\r\n                                            Edit</button>\r\n                                    </ct-flex-item>\r\n                                    <!-- issue-1249 -->\r\n                                    <!-- <ct-flex-item>\r\n                                        <button mat-flat-button size=\"forTableRow\"\r\n                                            [routerLink]=\"['/dispatcher/accounts/access/',el.id]\" color=\"primary\">\r\n                                            Access</button>\r\n                                    </ct-flex-item> -->\r\n                                    <ct-flex-item>\r\n                                        <button mat-flat-button size=\"forTableRow\"\r\n                                            [routerLink]=\"['/dispatcher/accounts/edit-password/',el.id]\"\r\n                                            color=\"primary\">\r\n                                            Change Password</button>\r\n                                    </ct-flex-item>\r\n                                </ct-flex>\r\n                            </ng-container>\r\n                        </td>\r\n                    </ng-container>\r\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"> </tr>\r\n                    <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\"> </tr>\r\n                </table>\r\n            </ct-table>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n\r\n    <ct-section-footer>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-flex justify-content=\"flex-start\" gap=\"8px\">\r\n                        <ct-table-pagination \r\n                            [pageableDefault]=\"accountsResult.accounts\" \r\n                            [globalDisable]=\"isLoading\"\r\n                            (next)=\"nextPage()\" \r\n                            (prev)=\"prevPage()\">\r\n                        </ct-table-pagination>\r\n                    </ct-flex>\r\n                </ct-flex-item>\r\n\r\n                <ng-container *ngIf=\"!dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n                    <ct-flex-item>\r\n                        <button mat-flat-button \r\n                            color=\"primary\" \r\n                            wide=\"wide\" \r\n                            [disabled]=\"isLoading\"\r\n                            routerLink=\"/dispatcher/accounts/add/\">\r\n                                Add New Account \r\n                        </button>\r\n                    </ct-flex-item>\r\n                </ng-container>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>","export * from './AccountResult';\r\nexport * from './accounts.service';\r\nexport * from './AccountsResult';\r\nexport * from './Authoritie';\r\nexport * from './NewAccount';\r\nexport * from './SimpleAccount';\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AccountsComponent } from './accounts/accounts.component';\r\nimport { AccountAddComponent } from './account-add/account-add.component';\r\nimport { AccountAccessComponent } from './account-access/account-access.component';\r\nimport { AccountEditComponent } from './account-edit/account-edit.component';\r\nimport { AccountEditPassComponent } from './account-edit-pass/account-edit-pass.component';\r\nimport { MaterialAppModule } from '@src/app/ngmaterial.module';\r\nimport { CtModule } from '../ct/ct.module';\r\n\r\n\r\nexport const AccountsRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AccountsComponent\r\n    },\r\n    {\r\n        path: 'add',\r\n        component: AccountAddComponent,\r\n        data: {\r\n            backConfig: ['../']\r\n        }\r\n    },\r\n    {\r\n        path: 'access/:accountId',\r\n        component: AccountAccessComponent,\r\n        data: {\r\n            backConfig: ['../', '../']\r\n        }\r\n    },\r\n    {\r\n        path: 'edit/:id',\r\n        component: AccountEditComponent,\r\n        data: {\r\n            backConfig: ['../', '../']\r\n        }\r\n    },\r\n    {\r\n        path: 'edit-password/:id',\r\n        component: AccountEditPassComponent,\r\n        data: {\r\n            backConfig: ['../', '../']\r\n        }\r\n    }\r\n];\r\n\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(AccountsRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AccountsRoutingModule { }\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        AccountsRoutingModule,\r\n        CtModule,\r\n        MaterialAppModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        TranslateModule.forChild({})\r\n    ],\r\n    declarations: [\r\n        AccountsComponent,\r\n        AccountAddComponent,\r\n        AccountAccessComponent,\r\n        AccountEditComponent,\r\n        AccountEditPassComponent\r\n    ]\r\n})\r\nexport class AccountsModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AccountsService } from '@app/services/accounts/accounts.service';\r\nimport { LoadStates } from '@app/enums/LoadStates';\r\nimport { SimpleAccount } from '@src/app/services/accounts';\r\n@Component({\r\n    selector: 'account-edit',\r\n    templateUrl: './account-edit.component.html',\r\n    styleUrls: ['./account-edit.component.scss']\r\n})\r\n\r\nexport class AccountEditComponent implements OnInit {\r\n    readonly states = LoadStates;\r\n    currentStates = new Set();\r\n    response;\r\n    account: SimpleAccount;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private router: Router,\r\n        private accountsService: AccountsService,\r\n        private location: Location\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.currentStates.add(this.states.firstLoading);\r\n        this.getAccount();\r\n    }\r\n\r\n\r\n    getAccount(): void {\r\n        const id = this.route.snapshot.paramMap.get('id');\r\n        this.accountsService\r\n            .getAccount(id)\r\n            .subscribe(\r\n                (response) => {\r\n                    this.account = response.account;\r\n                },\r\n                () => { },\r\n                () => {\r\n                    this.currentStates.delete(this.states.firstLoading);\r\n                }\r\n            );\r\n    }\r\n\r\n    back() {\r\n        this.location.back();\r\n    }\r\n\r\n    save() {\r\n        this.currentStates.add(this.states.wait);\r\n        this.accountsService\r\n            .editFormCommit(this.account.id.toString(), this.account.publicName, this.account.enabled)\r\n            .subscribe(\r\n                (response) => {\r\n                    this.router.navigate(['/dispatcher', 'accounts']);\r\n                },\r\n                () => { },\r\n                () => {\r\n                    this.currentStates.delete(this.states.wait);\r\n                }\r\n            );\r\n    }\r\n}","<ct-cols align-items=\"baseline\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>Edit Account {{account ? account.username : ''}} ({{account ? account.publicName : ''}})\r\n                    </ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body *ngIf=\"!currentStates.has(states.firstLoading)\">\r\n                <ct-section-body-row>\r\n                    <ct-section-content>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Public Name</mat-label>\r\n                            <input matInput=\"matInput\" [(ngModel)]=\"account.publicName\" />\r\n                        </mat-form-field>\r\n                    </ct-section-content>\r\n                    <ct-section-content>\r\n                        <mat-checkbox [(ngModel)]=\"account.enabled\">Is account enabled?</mat-checkbox>\r\n                    </ct-section-content>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" (click)=\"save()\" color=\"primary\"\r\n                                [disabled]=\"currentStates.has(states.wait)\">Save</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-section *ngIf=\"response\">\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <p>STATUS: {{response.status}}</p>\r\n                    <p *ngFor=\"let error of response.errorMessages; index as i; \">{{error}}</p>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n        </ct-section>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AccountsService, Authority, SimpleAccount } from '@app/services/accounts';\r\nimport { Role } from '@app/services/authentication';\r\nimport { AccountResult } from '@src/app/services/accounts/AccountResult';\r\n\r\n@Component({\r\n    selector: 'account-access',\r\n    templateUrl: './account-access.component.html',\r\n    styleUrls: ['./account-access.component.scss'],\r\n})\r\nexport class AccountAccessComponent implements OnInit {\r\n    response: AccountResult;\r\n\r\n    isManager: boolean = false;\r\n    isOperator: boolean = false;\r\n    isBilling: boolean = false;\r\n    isData: boolean = false;\r\n    isAdmin: boolean = false;\r\n    isServerRestAccess: boolean = false;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private accountsService: AccountsService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.accountsService\r\n            .getAccount(this.route.snapshot.paramMap.get('accountId'))\r\n            .subscribe((response) => {\r\n                this.response = response;\r\n                const roles: Role[] = [];\r\n                response.account.authorities.forEach((authority: Authority) => roles.push(authority.authority));\r\n                this.isManager = roles.includes(Role.ROLE_MANAGER);\r\n                this.isOperator = roles.includes(Role.ROLE_OPERATOR);\r\n                this.isBilling = roles.includes(Role.ROLE_BILLING);\r\n                this.isData = roles.includes(Role.ROLE_DATA);\r\n                this.isAdmin = roles.includes(Role.ROLE_ADMIN);\r\n                this.isServerRestAccess = roles.includes(Role.ROLE_SERVER_REST_ACCESS);\r\n            });\r\n    }\r\n\r\n    save(): void {\r\n        const roles: string[] = [];\r\n        const accountId: string = this.route.snapshot.paramMap.get('accountId');\r\n\r\n        if (this.isAdmin) { roles.push(Role.ROLE_ADMIN); }\r\n        if (this.isBilling) { roles.push(Role.ROLE_BILLING); }\r\n        if (this.isData) { roles.push(Role.ROLE_DATA); }\r\n        if (this.isManager) { roles.push(Role.ROLE_MANAGER); }\r\n        if (this.isOperator) { roles.push(Role.ROLE_OPERATOR); }\r\n        if (this.isServerRestAccess) { roles.push(Role.ROLE_SERVER_REST_ACCESS); }\r\n\r\n        this.accountsService\r\n            .roleFormCommit(accountId, roles.join(','))\r\n            .subscribe(() => { });\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../..'], { relativeTo: this.route });\r\n    }\r\n}\r\n","<ct-cols *ngIf=\"response\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>\r\n                        Account Role id {{response.account?.id }}, login {{response.account?.username}}\r\n                    </ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row *ngIf=\"response\" style=\"font-size:125%;\">\r\n                    <ct-section-content>\r\n                        <mat-checkbox [(ngModel)]=\"isManager\">Manager</mat-checkbox>\r\n                    </ct-section-content>\r\n                    <ct-section-content>\r\n                        <mat-checkbox [(ngModel)]=\"isOperator\">Operator</mat-checkbox>\r\n                    </ct-section-content>\r\n                    <ct-section-content>\r\n                        <mat-checkbox [(ngModel)]=\"isBilling\">Billing</mat-checkbox>\r\n                    </ct-section-content>\r\n                    <ct-section-content>\r\n                        <mat-checkbox [(ngModel)]=\"isData\">Data</mat-checkbox>\r\n                    </ct-section-content>\r\n                    <ct-section-content>\r\n                        <mat-checkbox [(ngModel)]=\"isServerRestAccess\">Server Rest Access</mat-checkbox>\r\n                    </ct-section-content>\r\n                    <ct-section-content>\r\n                        <mat-checkbox [(ngModel)]=\"isAdmin\">Admin</mat-checkbox>\r\n                    </ct-section-content>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button (click)=\"back()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button color=\"primary\" (click)=\"save()\">Save</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n</ct-cols>","import { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { LoadStates } from '@app/enums/LoadStates';\r\nimport { DefaultResponse } from '@app/models/DefaultResponse';\r\nimport { AccountsService } from '@app/services/accounts/accounts.service';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'account-add',\r\n    templateUrl: './account-add.component.html',\r\n    styleUrls: ['./account-add.component.scss']\r\n})\r\n\r\nexport class AccountAddComponent {\r\n    readonly states = LoadStates;\r\n    currentStates = new Set();\r\n    response: DefaultResponse;\r\n    form = new FormGroup({\r\n        username: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n        password: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n        password2: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            (control: FormControl) => {\r\n                const group: FormGroup = this.form;\r\n                if (group) {\r\n                    return (group.value.password === control.value) ? null : {\r\n                        notSame: true\r\n                    };\r\n                }\r\n                return null;\r\n            }\r\n        ]),\r\n        publicName: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n    });\r\n\r\n    constructor(\r\n        private accountsService: AccountsService,\r\n        private router: Router,\r\n    ) { }\r\n\r\n\r\n    create(): void {\r\n        this.currentStates.add(this.states.wait);\r\n        const subscribe: Subscription = this.accountsService\r\n            .addFormCommit(this.form.value)\r\n            .subscribe(\r\n                (response) => {\r\n                    if (response.status === OperationStatus.OK) {\r\n                        this.router.navigate(['/dispatcher', 'accounts']);\r\n                    }\r\n                },\r\n                () => { },\r\n                () => {\r\n                    this.currentStates.delete(this.states.wait);\r\n                    subscribe.unsubscribe();\r\n                }\r\n            );\r\n    }\r\n}","\r\n<ct-cols align-items=\"baseline\">\r\n  <ct-col size=\"6\">\r\n    <ct-section>\r\n      <ct-section-header>\r\n        <ct-section-header-row>\r\n          <ct-heading>New Account</ct-heading>\r\n        </ct-section-header-row>\r\n      </ct-section-header>\r\n      <ct-section-body>\r\n        <ct-section-body-row>\r\n          <form [formGroup]=\"form\" novalidate=\"novalidate\">\r\n            <ct-section-content>\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Username</mat-label>\r\n                <input type=\"text\" matInput=\"matInput\" autocomplete=\"off\" formControlName=\"username\"/>\r\n                <mat-hint>This is a required field.</mat-hint>\r\n              </mat-form-field>\r\n            </ct-section-content>\r\n            <ct-section-content>\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Password</mat-label>\r\n                <input type=\"password\" matInput=\"matInput\" autocomplete=\"off\" formControlName=\"password\"/>\r\n                <mat-hint>This is a required field.</mat-hint>\r\n              </mat-form-field>\r\n            </ct-section-content>\r\n            <ct-section-content>\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Password again</mat-label>\r\n                <input type=\"password\" matInput=\"matInput\" autocomplete=\"off\" formControlName=\"password2\"/>\r\n                <mat-hint>This is a required field.</mat-hint>\r\n              </mat-form-field>\r\n            </ct-section-content>\r\n            <ct-section-content>\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Public name</mat-label>\r\n                <input type=\"text\" matInput=\"matInput\" autocomplete=\"off\" formControlName=\"publicName\"/>\r\n                <mat-hint>This is a required field.</mat-hint>\r\n              </mat-form-field>\r\n            </ct-section-content>\r\n          </form>\r\n        </ct-section-body-row>\r\n      </ct-section-body>\r\n      <ct-section-footer>\r\n        <ct-section-footer-row>\r\n          <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n            <ct-flex-item>\r\n              <button mat-stroked-button=\"mat-stroked-button\" routerLink=\"/dispatcher/accounts/\">Cancel</button>\r\n            </ct-flex-item>\r\n            <ct-flex-item>\r\n              <button mat-flat-button=\"mat-flat-button\" (click)=\"create()\" color=\"primary\" [disabled]=\"currentStates.has(states.wait) || form.invalid\">Create</button>\r\n            </ct-flex-item>\r\n          </ct-flex>\r\n        </ct-section-footer-row>\r\n      </ct-section-footer>\r\n    </ct-section>\r\n  </ct-col>\r\n  <ct-col size=\"6\">\r\n    <ct-section *ngIf=\"response\">\r\n      <ct-section-body>\r\n        <ct-section-body-row>\r\n          <p>STATUS: {{response.status}}</p>\r\n          <p *ngFor=\"let error of response.errorMessages; index as i; \">{{error}}</p>\r\n        </ct-section-body-row>\r\n      </ct-section-body>\r\n    </ct-section>\r\n  </ct-col>\r\n</ct-cols>"]}