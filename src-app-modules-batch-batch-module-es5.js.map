{"version":3,"sources":["webpack:///src/app/modules/batch/batch-list/batch-list.component.html","webpack:///src/app/modules/batch/batch-list/batch-list.component.ts","webpack:///src/app/modules/batch/batch-state/batch-state.component.ts","webpack:///src/app/modules/batch/batch-state/batch-state.component.html","webpack:///src/app/modules/batch/batch-add/batch-add.component.ts","webpack:///src/app/modules/batch/batch-add/batch-add.component.html","webpack:///src/app/modules/batch/batch.module.ts","webpack:///src/app/modules/batch/batch-status/batch-status.component.ts","webpack:///src/app/modules/batch/batch-status/batch-status.component.html","webpack:///src/app/modules/batch/batch-root/batch-root.component.ts","webpack:///src/app/modules/batch/batch-root/batch-root.component.html"],"names":["BatchListComponent","batchService","authenticationService","dialog","translate","batchExexStatusService","settingsService","dataSource","columnsToDisplay","isFiltered","events","value","settings","batchFilter","updateTable","subscribeSubscription","getStatuses","subscribe","next","statuses","updateBatchesResultByStatuses","batchesResult","unsubscribeSubscriptions","pageNumbder","isLoading","batches","isRoleOperator","content","toggleBatchFilter","b","event","batchData","processResourceDeleteCommit","batch","id","toString","number","batchId","stopPropagation","downloadFile","res","tryname","headers","get","split","body","batchDownloader","download","clear","isSelected","ok","execState","Finished","toggle","size","question","text","params","rejectTitle","resolveTitle","Event","BatchStateComponent","route","sourceCodeId","snapshot","paramMap","execContextId","BatchAddComponent","router","currentStates","Set","listOfSourceCodes","use","language","updateResponse","batchAdd","response","items","navigate","relativeTo","uploadFile","sourceCode","fileUpload","fileInput","nativeElement","files","status","OK","back","uploadResponse","file","commonRequiredRoles","Admin","Data","Manager","Operator","BatchRoutes","path","component","canActivate","data","requiredRoles","children","backConfig","BatchRoutingModule","forChild","BatchModule","BatchStatusComponent","states","currentState","firstLoading","getProcessingResourceStatus","show","BatchRootComponent"],"mappings":"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","file":"src-app-modules-batch-batch-module-es5.js","sourcesContent":["<ct-section *ngIf=\"batchesResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-flex justify-content=\"space-between\" align-items=\"center\" gap=\"unit(1)\">\r\n                <ct-flex-item>\r\n                    <ct-heading>{{ 'batch.Batch' | translate }} </ct-heading>\r\n                </ct-flex-item>\r\n                <ct-flex-item>\r\n                    <ct-flex justify-content=\"flex-end\" align-items=\"center\" gap=\"unit(1)\">\r\n                        <ct-flex-item>\r\n                            <ng-container *ngTemplateOutlet=\"uploadFilesButton\"></ng-container>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button (click)=\"toggleFilter()\" [disabled]=\"false\">\r\n                                <span *ngIf=\"isFiltered\" style=\"vertical-align: baseline;\">✓&nbsp;&nbsp;</span>\r\n                                <span *ngIf=\"!isFiltered\" style=\"vertical-align: baseline;\">✗&nbsp;&nbsp;</span>\r\n                                <span>{{ 'batch.onlyMyBatches' | translate }}</span>\r\n                            </button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-table [isWaiting]=\"isLoading\">\r\n                <table mat-table [dataSource]=\"dataSource\">\r\n                    <ng-container matColumnDef=\"id\">\r\n                        <th mat-header-cell *matHeaderCellDef>{{ 'batch.Id' | translate }}</th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.batch.id}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"createdOn\">\r\n                        <th mat-header-cell *matHeaderCellDef>{{ 'batch.Created On' | translate }}\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            {{el.batch.createdOn | date:'MMM d, yyyy, HH:mm:ss'}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"Owner\">\r\n                        <th mat-header-cell *matHeaderCellDef>{{ 'batch.Owner\\'s username' | translate }}\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.username}}</td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"isBatchConsistent\">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                            {{ 'batch.Is Batch Consistent?' | translate }} </th>\r\n                        <td mat-cell *matCellDef=\"let el\"> <span *ngIf=\"el.ok\">{{ 'batch.isBatchConsistent.true' |\r\n                                translate }}</span><span *ngIf=\"!el.ok\">{{ 'batch.isBatchConsistent.false' | translate\r\n                                }}</span></td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"sourceCode\">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                            <div class=\"no-wrap\">{{ 'batch.Source Code' | translate }}</div>\r\n                            <div class=\"no-wrap\">{{ 'batch.File name' | translate }}</div>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <div class=\"no-wrap\">{{el.sourceCodeUid}}</div>\r\n                            <div class=\"no-wrap\">{{el.uploadedFileName}}</div>\r\n                        </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"execState\">\r\n                        <th mat-header-cell *matHeaderCellDef> {{ 'batch.Exec State' | translate }}\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <span *ngIf=\"el.execState === -1\">\r\n                                {{ 'batch.isBatchConsistent.Error' | translate }}\r\n                            </span>\r\n                            <span *ngIf=\"el.execState === 2\">\r\n                                {{ 'batch.isBatchConsistent.Preparing' | translate }}\r\n                            </span>\r\n                            <span *ngIf=\"el.execState === 3\">\r\n                                {{ 'batch.isBatchConsistent.Processing' | translate }}\r\n                            </span>\r\n                            <span *ngIf=\"el.execState === 4\">\r\n                                {{ 'batch.isBatchConsistent.Finished' | translate }}\r\n                            </span>\r\n                        </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"bts\">\r\n                        <th mat-header-cell *matHeaderCellDef> </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ct-flex justify-content=\"flex-end\" gap=\"9px\">\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button size=\"forTableRow\" [disabled]=\"el.execContextDeleted\"\r\n                                        [routerLink]=\"['/batch',el.batch.id,'source-code',el.batch.sourceCodeId,'exec-context',el.batch.execContextId, 'state']\"\r\n                                        color=\"primary\">\r\n                                        {{ 'batch.Task states' | translate }}</button>\r\n                                </ct-flex-item>\r\n\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button size=\"forTableRow\"\r\n                                        [disabled]=\"el.execState !== 4 || el.execContextDeleted\"\r\n                                        [routerLink]=\"['/batch',el.batch.id,'status']\" color=\"primary\">\r\n                                        {{ 'batch.Status' | translate }}</button>\r\n                                </ct-flex-item>\r\n\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button size=\"forTableRow\" color=\"primary\"\r\n                                        [disabled]=\"el.execState !== 4 || el.execContextDeleted\"\r\n                                        (click)=\"downloadFile($event, el.batch.id)\">\r\n                                        {{ 'batch.Download Result' | translate }}</button>\r\n                                </ct-flex-item>\r\n\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button color=\"warn\" size=\"forTableRow\" (click)=\"delete($event, el)\"\r\n                                        title=\"Delete\">\r\n                                        <mat-icon>delete</mat-icon>\r\n                                    </button>\r\n                                </ct-flex-item>\r\n                            </ct-flex>\r\n                        </td>\r\n                    </ng-container>\r\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"> </tr>\r\n                    <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\"\r\n                        [class.deleted-table-row]=\"isDeletedRow(row)\" [class.selected-color]=\"isSelectedRow(row)\"\r\n                        (click)=\"selectRow($event,row)\"></tr>\r\n                </table>\r\n            </ct-table>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n    <ct-section-footer>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\" align-items=\"center\">\r\n                <ct-flex-item>\r\n                    <ct-table-pagination (prev)=\"prevPage()\" (next)=\"nextPage()\"\r\n                        [pageableDefault]=\"batchesResult.batches\"></ct-table-pagination>\r\n                </ct-flex-item>\r\n\r\n                <ct-flex-item *ngIf=\"countOfSelectedRows()\">\r\n                    <ct-flex justify-content=\"center\" align-items=\"center\" gap=\"unit(1)\">\r\n                        <ct-flex-item>\r\n                            <div class=\"selected-count\">\r\n                                {{ 'batch.Batch' | translate}} × {{countOfSelectedRows()}}\r\n                            </div>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button color=\"primary\" (click)=\"downloadSelectedRows()\">{{ 'batch.Download'\r\n                                | translate}}</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button color=\"primary\" (click)=\"discardSelectedRows()\">{{ 'batch.Discard'\r\n                                | translate}}</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-flex-item>\r\n\r\n                <ct-flex-item>\r\n                    <ng-container *ngTemplateOutlet=\"uploadFilesButton\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>\r\n\r\n\r\n\r\n<ng-template #uploadFilesButton>\r\n    <button mat-flat-button color=\"primary\" [disabled]=\"false\" routerLink=\"/batch/add\">\r\n        {{ 'batch.Upload files and start processing' | translate }}</button>\r\n</ng-template>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<ng-template #uploadFilesButton>\r\n    <button mat-flat-button color=\"primary\" [disabled]=\"false\" routerLink=\"/batch/add\">\r\n        {{ 'batch.Upload files and start processing' | translate }}</button>\r\n</ng-template>","import { HttpResponse } from '@angular/common/http';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { ConfirmationDialogMethod, QuestionData } from '@src/app/components/app-dialog-confirmation/app-dialog-confirmation.component';\r\nimport { BatchExecState } from '@src/app/enums/BatchExecState';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { BatchService } from '@src/app/services/batch/batch.service';\r\nimport { BatchData } from '@src/app/services/batch/BatchData';\r\nimport { BatchesResult } from '@src/app/services/batch/BatchesResult';\r\nimport { BatchExexStatusService } from '@src/app/services/batch/BatchExecStatusService';\r\nimport { SettingsService } from '@src/app/services/settings/settings.service';\r\nimport * as fileSaver from 'file-saver';\r\n\r\n\r\n@Component({\r\n    selector: 'batch-list',\r\n    templateUrl: './batch-list.component.html',\r\n    styleUrls: ['./batch-list.component.scss']\r\n})\r\nexport class BatchListComponent extends UIStateComponent implements OnInit, OnDestroy {\r\n    batchesResult: BatchesResult;\r\n    isFiltered: boolean;\r\n    dataSource: MatTableDataSource<BatchData.BatchExecInfo> = new MatTableDataSource([]);\r\n    columnsToDisplay: string[] = ['id', 'createdOn', 'Owner', 'isBatchConsistent', 'sourceCode', 'execState', 'bts'];\r\n\r\n    constructor(\r\n        private batchService: BatchService,\r\n        readonly authenticationService: AuthenticationService,\r\n        readonly dialog: MatDialog,\r\n        readonly translate: TranslateService,\r\n        private batchExexStatusService: BatchExexStatusService,\r\n        private settingsService: SettingsService\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.isFiltered = this.settingsService.events.value.settings.batchFilter;\r\n        this.updateTable('0', this.isFiltered);\r\n        this.subscribeSubscription(this.batchExexStatusService.getStatuses.subscribe({\r\n            next: statuses => {\r\n                this.batchExexStatusService.updateBatchesResultByStatuses(this.batchesResult, statuses);\r\n            }\r\n        }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribeSubscriptions();\r\n    }\r\n\r\n    updateTable(pageNumbder: string, isFiltered: boolean): void {\r\n        this.isLoading = true;\r\n        this.batchService\r\n            .batches(pageNumbder, isFiltered)\r\n            .subscribe({\r\n                next: batchesResult => {\r\n                    this.batchesResult = batchesResult;\r\n                    this.columnsToDisplay = this.authenticationService.isRoleOperator() ?\r\n                        ['id', 'createdOn', 'Owner', 'sourceCode', 'execState', 'bts'] :\r\n                        ['id', 'createdOn', 'Owner', 'isBatchConsistent', 'sourceCode', 'execState', 'bts'];\r\n                    this.dataSource = new MatTableDataSource(batchesResult.batches.content || []);\r\n                    this.isLoading = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    toggleFilter(): void {\r\n        this.isFiltered = !this.isFiltered;\r\n        this.settingsService.toggleBatchFilter(this.isFiltered);\r\n        this.updateTable('0', this.isFiltered);\r\n    }\r\n\r\n    isDeletedRow(b: BatchData.BatchExecInfo): boolean {\r\n        return false;\r\n    }\r\n\r\n    @ConfirmationDialogMethod({\r\n        question: (event: Event, batchData: BatchData.BatchExecInfo): QuestionData => {\r\n            event.stopPropagation();\r\n            return {\r\n                text: marker('batch.delete-dialog.Do you want to delete Batch _batchId_'),\r\n                params: { batchId: batchData.batch.id }\r\n            };\r\n        },\r\n        rejectTitle: `${marker('batch.delete-dialog.Cancel')}`,\r\n        resolveTitle: `${marker('batch.delete-dialog.Delete')}`,\r\n    })\r\n    delete(event: Event, batchData: BatchData.BatchExecInfo): void {\r\n        this.batchService\r\n            .processResourceDeleteCommit(batchData.batch.id.toString())\r\n            .subscribe({\r\n                next: () => {\r\n                    this.updateTable((this.batchesResult.batches.number).toString(), this.isFiltered);\r\n                }\r\n            });\r\n    }\r\n\r\n    downloadFile(event: Event, batchId: string): void {\r\n        event.stopPropagation();\r\n        this.batchService.downloadFile(batchId)\r\n            .subscribe((res: HttpResponse<Blob>) => {\r\n                const tryname: string = res.headers.get('Content-Disposition')?.split?.('\\'\\'')?.[1];\r\n                fileSaver.saveAs(res.body, tryname ? tryname : 'result.zip');\r\n            });\r\n    }\r\n\r\n    downloadSelectedRows(): void {\r\n        this.batchService.batchDownloader.download();\r\n    }\r\n\r\n    discardSelectedRows(): void {\r\n        this.batchService.batchDownloader.clear();\r\n    }\r\n\r\n    isSelectedRow(batchData: BatchData.BatchExecInfo): boolean {\r\n        return this.batchService.batchDownloader.isSelected(batchData);\r\n    }\r\n\r\n    selectRow(event: Event, batchData: BatchData.BatchExecInfo): void {\r\n        event.stopPropagation();\r\n        if (batchData.ok &&\r\n            batchData.execState === BatchExecState.Finished) {\r\n            this.batchService.batchDownloader.toggle(batchData);\r\n        }\r\n    }\r\n\r\n    countOfSelectedRows(): number {\r\n        return this.batchService.batchDownloader.size;\r\n    }\r\n\r\n    nextPage(): void {\r\n        this.updateTable((this.batchesResult.batches.number + 1).toString(), this.isFiltered);\r\n    }\r\n\r\n    prevPage(): void {\r\n        this.updateTable((this.batchesResult.batches.number - 1).toString(), this.isFiltered);\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'batch-state',\r\n  templateUrl: './batch-state.component.html',\r\n  styleUrls: ['./batch-state.component.sass']\r\n})\r\nexport class BatchStateComponent {\r\n  sourceCodeId: string;\r\n  execContextId: string;\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    this.sourceCodeId = this.route.snapshot.paramMap.get('sourceCodeId');\r\n    this.execContextId = this.route.snapshot.paramMap.get('execContextId');\r\n  }\r\n}\r\n","<ct-section>\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-heading>State of Tasks</ct-heading>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-state-of-tasks [sourceCodeId]=\"sourceCodeId\" [execContextId]=\"execContextId\"></ct-state-of-tasks>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n</ct-section>","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LoadStates } from '@app/enums/LoadStates';\r\nimport { BatchService } from '@app/services/batch/batch.service';\r\nimport { SourceCode } from '@app/services/source-codes/SourceCode';\r\nimport { SourceCodeUid } from '@app/services/source-codes/SourceCodeUid';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { SettingsService, SettingsServiceEventChange } from '@src/app/services/settings/settings.service';\r\nimport { SourceCodeUidsForCompany } from '@src/app/services/source-codes/SourceCodeUidsForCompany';\r\nimport { CtFileUploadComponent } from '../../ct/ct-file-upload/ct-file-upload.component';\r\n\r\n@Component({\r\n    selector: 'batch-add',\r\n    templateUrl: './batch-add.component.html',\r\n    styleUrls: ['./batch-add.component.scss']\r\n})\r\n\r\nexport class BatchAddComponent extends UIStateComponent implements OnInit, OnDestroy {\r\n    currentStates: Set<LoadStates> = new Set();\r\n    response: SourceCodeUidsForCompany;\r\n    uploadResponse: OperationStatusRest;\r\n\r\n    sourceCode: SourceCode;\r\n    file: File;\r\n    listOfSourceCodes: SourceCodeUid[] = [];\r\n    @ViewChild('fileUpload') fileUpload: CtFileUploadComponent;\r\n\r\n    constructor(\r\n        private batchService: BatchService,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private translate: TranslateService,\r\n        private settingsService: SettingsService,\r\n        readonly authenticationService: AuthenticationService,\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.subscribeSubscription(this.settingsService.events.subscribe(event => {\r\n            if (event instanceof SettingsServiceEventChange) {\r\n                this.translate.use(event.settings.language);\r\n            }\r\n        }));\r\n\r\n        this.updateResponse();\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribeSubscriptions();\r\n    }\r\n\r\n    updateResponse(): void {\r\n        this.batchService\r\n            .batchAdd()\r\n            .subscribe((response) => {\r\n                this.response = response;\r\n                this.listOfSourceCodes = this.response.items;\r\n            });\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../'], { relativeTo: this.route });\r\n    }\r\n\r\n    upload(): void {\r\n        this.batchService\r\n            .uploadFile(this.sourceCode.id.toString(), this.fileUpload.fileInput.nativeElement.files[0])\r\n            .subscribe((response) => {\r\n                if (response.status === OperationStatus.OK) {\r\n                    this.back();\r\n                }\r\n                this.uploadResponse = response;\r\n            });\r\n    }\r\n\r\n    fileUploadChanged(): void {\r\n        this.file = this.fileUpload.fileInput.nativeElement.files[0] || false;\r\n    }\r\n}","<ct-cols *ngIf=\"response\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>{{ 'batch-add.Upload file for processing' | translate }}</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label> {{ 'batch-add.List of Source Codes' | translate }}</mat-label>\r\n                        <mat-select [(ngModel)]=\"sourceCode\">\r\n                            <div *ngFor=\"let sourceCode of listOfSourceCodes\">\r\n                                <mat-option [value]=\"sourceCode\">{{sourceCode.uid}}</mat-option>\r\n                            </div>\r\n                        </mat-select>\r\n                        <mat-hint>{{ 'batch-add.This is a required field.' | translate }}</mat-hint>\r\n                    </mat-form-field>\r\n\r\n                    <br>\r\n                    <br>\r\n\r\n                    <div>\r\n                        <ct-file-upload #fileUpload acceptTypes=\".zip, .xml\"\r\n                            buttonTitle=\"{{'batch-add.Select File' | translate}}\" (changed)=\"fileUploadChanged()\">\r\n                        </ct-file-upload>\r\n                        <ct-hint>{{ 'batch-add.This is a required field.' | translate }}</ct-hint>\r\n                        <ct-hint>{{ 'batch-add.Only .xml and .zip files are supported' | translate }}</ct-hint>\r\n                    </div>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\">\r\n                                {{ 'batch-add.Cancel' | translate }}</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" color=\"primary\" [disabled]=\"!sourceCode || !file\"\r\n                                (click)=\"upload()\"> {{ 'batch-add.Upload-File-button' | translate }}</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"uploadResponse\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MaterialAppModule } from '../../ngmaterial.module';\r\nimport { BatchStatusComponent } from './batch-status/batch-status.component';\r\nimport { BatchAddComponent } from './batch-add/batch-add.component';\r\nimport { CtModule } from '../ct/ct.module';\r\nimport { BatchRootComponent } from './batch-root/batch-root.component';\r\nimport { CopyRightModule } from '../copy-right/copy-right.module';\r\nimport { BatchStateComponent } from './batch-state/batch-state.component';\r\nimport { BatchListComponent } from './batch-list/batch-list.component';\r\nimport { RoleRouteGuard } from '@src/app/guards/role-route.guard';\r\nimport { Role } from '@src/app/services/authentication';\r\n\r\nconst commonRequiredRoles: Role[] = [Role.Admin, Role.Data, Role.Manager, Role.Operator];\r\n\r\nexport const BatchRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: BatchRootComponent,\r\n        canActivate: [RoleRouteGuard],\r\n        data: { requiredRoles: commonRequiredRoles },\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: BatchListComponent,\r\n                canActivate: [RoleRouteGuard],\r\n                data: { requiredRoles: commonRequiredRoles },\r\n            },\r\n            {\r\n                path: ':batchId/status',\r\n                component: BatchStatusComponent,\r\n                canActivate: [RoleRouteGuard],\r\n                data: {\r\n                    backConfig: ['../', '../'],\r\n                    requiredRoles: commonRequiredRoles\r\n                }\r\n            },\r\n            {\r\n                path: 'add',\r\n                component: BatchAddComponent,\r\n                canActivate: [RoleRouteGuard],\r\n                data: {\r\n                    backConfig: ['../'],\r\n                    requiredRoles: commonRequiredRoles\r\n                }\r\n            },\r\n            {\r\n                path: ':batchId/source-code/:sourceCodeId/exec-context/:execContextId/state',\r\n                component: BatchStateComponent,\r\n                canActivate: [RoleRouteGuard],\r\n                data: {\r\n                    backConfig: ['../', '../', '../', '../', '../', '../'],\r\n                    requiredRoles: commonRequiredRoles\r\n                }\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(BatchRoutes)],\r\n    exports: [RouterModule],\r\n    declarations: []\r\n})\r\nexport class BatchRoutingModule { }\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        BatchRoutingModule,\r\n        CtModule,\r\n        MaterialAppModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        CopyRightModule,\r\n        TranslateModule.forChild({})\r\n    ],\r\n    declarations: [\r\n        BatchRootComponent,\r\n        BatchStatusComponent,\r\n        BatchAddComponent,\r\n        BatchStateComponent,\r\n        BatchListComponent\r\n    ]\r\n})\r\nexport class BatchModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { LoadStates } from '@app/enums/LoadStates';\r\nimport { BatchService } from '@app/services/batch/batch.service';\r\nimport { Status } from '@src/app/services/batch/Status';\r\n\r\n@Component({\r\n    selector: 'batch-status',\r\n    templateUrl: './batch-status.component.html',\r\n    styleUrls: ['./batch-status.component.scss']\r\n})\r\n\r\nexport class BatchStatusComponent implements OnInit {\r\n    readonly states = LoadStates;\r\n    currentState: LoadStates = LoadStates.firstLoading;\r\n\r\n    response: Status;\r\n    batchId: string;\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private batchService: BatchService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit() {\r\n        this.batchId = this.route.snapshot.paramMap.get('batchId');\r\n        this.updateResponse();\r\n    }\r\n    updateResponse() {\r\n        this.batchService\r\n            .getProcessingResourceStatus(this.batchId)\r\n            .subscribe(response => {\r\n                this.response = response;\r\n                this.currentState = this.states.show;\r\n            });\r\n    }\r\n}","\r\n<ct-section>\r\n  <ct-section-header>\r\n    <ct-section-header-row>\r\n      <ct-heading>  \r\n        <div>{{ 'batch-status.Status of execution of batch _batchId_' | translate:{batchId: batchId} }} </div>\r\n      </ct-heading>\r\n    </ct-section-header-row>\r\n  </ct-section-header>\r\n  <ct-section-body>\r\n    <ct-section-body-row *ngIf=\"[states.wait,states.show].includes(currentState)\"> \r\n      <ct-pre>{{response.console}}</ct-pre>\r\n    </ct-section-body-row>\r\n  </ct-section-body>\r\n</ct-section>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'batch-root',\r\n  templateUrl: './batch-root.component.html',\r\n  styleUrls: ['./batch-root.component.sass']\r\n})\r\nexport class BatchRootComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<ct-content>\r\n    <router-outlet></router-outlet>\r\n    <ct-back-button></ct-back-button>\r\n    <copy-right></copy-right>\r\n</ct-content>"]}