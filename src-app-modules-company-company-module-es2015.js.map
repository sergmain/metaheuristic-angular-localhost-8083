{"version":3,"sources":["./src/app/modules/company/account-add/account-add.component.ts","./src/app/modules/company/account-add/account-add.component.html","./src/app/modules/company/company/company.component.ts","./src/app/modules/company/company/company.component.html","./src/app/modules/company/company-batch-status/company-batch-status.component.ts","./src/app/modules/company/company-batch-status/company-batch-status.component.html","./src/app/modules/company/account-edit/account-edit.component.ts","./src/app/modules/company/account-edit/account-edit.component.html","./src/app/modules/company/company-batches/company-batch-list.component.ts","./src/app/modules/company/company-batches/company-batch-list.component.html","./src/app/modules/company/account-edit-roles/account-edit-roles.component.ts","./src/app/modules/company/account-edit-roles/account-edit-roles.component.html","./src/app/modules/company/company-add/company-add.component.ts","./src/app/modules/company/company-add/company-add.component.html","./src/app/modules/company/companies/companies.component.ts","./src/app/modules/company/companies/companies.component.html","./src/app/modules/company/company-batch-upload/company-batch-upload.component.ts","./src/app/modules/company/company-batch-upload/company-batch-upload.component.html","./src/app/services/company/company.service.ts","./src/app/modules/company/company-edit/company-edit.component.ts","./src/app/modules/company/company-edit/company-edit.component.html","./src/app/modules/company/accounts/accounts.component.ts","./src/app/modules/company/accounts/accounts.component.html","./src/app/modules/company/account-edit-password/account-edit-password.component.ts","./src/app/modules/company/account-edit-password/account-edit-password.component.html","./src/app/modules/company/company.module.ts"],"names":[],"mappings":"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","file":"src-app-modules-company-company-module-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AccountResult } from '@src/app/services/accounts';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { FormGroup, FormControl, Validators, ValidationErrors } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\n\r\n@Component({\r\n    selector: 'account-add',\r\n    templateUrl: './account-add.component.html',\r\n    styleUrls: ['./account-add.component.sass']\r\n})\r\nexport class AccountAddComponent implements OnInit {\r\n    accountResult: AccountResult;\r\n    companyUniqueId: string;\r\n    operationStatusRest: OperationStatusRest;\r\n    isLoading: boolean;\r\n    isDone: boolean;\r\n\r\n    form = new FormGroup({\r\n        publicName: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3)\r\n        ]),\r\n        username: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3)\r\n        ]),\r\n        password: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3)\r\n        ]),\r\n        password2: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            (control: FormControl): ValidationErrors | null => {\r\n                const group: FormGroup = this.form;\r\n                if (group) {\r\n                    return (group.value.password === control.value) ? null : {\r\n                        notSame: true\r\n                    };\r\n                }\r\n                return null;\r\n            }\r\n        ]),\r\n    });\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        private companyService: CompanyService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isDone = false;\r\n        this.isLoading = true;\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.isLoading = false;\r\n\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../../', 'accounts'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    createAccount(): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .addFormCommitNewAccount({\r\n                username: this.form.value.username,\r\n                password: this.form.value.password,\r\n                password2: this.form.value.password2,\r\n                publicName: this.form.value.publicName\r\n            }, this.companyUniqueId)\r\n            .subscribe({\r\n                next: (operationStatusRest) => this.operationStatusRest = operationStatusRest,\r\n                complete: () => {\r\n                    if (this.operationStatusRest.status === OperationStatus.OK) {\r\n                        this.isDone = true;\r\n                        this.form.reset();\r\n                    }\r\n                    this.isLoading = false;\r\n                }\r\n            });\r\n    }\r\n}\r\n","<ct-cols align-items=\"baseline\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>New Account</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <form [formGroup]=\"form\" novalidate=\"novalidate\" autocomplete=\"off\">\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Name</mat-label>\r\n                            <input matInput=\"matInput\" type=\"text\" autocomplete=\"name\" formControlName=\"username\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Password</mat-label>\r\n                            <input matInput=\"matInput\" type=\"password\" autocomplete=\"new-password\"\r\n                                formControlName=\"password\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Password again</mat-label>\r\n                            <input matInput=\"matInput\" type=\"password\" autocomplete=\"new-password\"\r\n                                formControlName=\"password2\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Public Name</mat-label>\r\n                            <input matInput=\"matInput\" type=\"text\" autocomplete=\"name\" formControlName=\"publicName\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                    </form>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" (click)=\"createAccount()\" color=\"primary\"\r\n                                [disabled]=\"isDone || isLoading || form.invalid\">Create Account</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'company',\r\n  templateUrl: './company.component.html',\r\n  styleUrls: ['./company.component.sass']\r\n})\r\nexport class CompanyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>company works!</p>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BatchData } from '@src/app/services/batch/BatchData';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\n\r\n@Component({\r\n    selector: 'company-batch-status',\r\n    templateUrl: './company-batch-status.component.html',\r\n    styleUrls: ['./company-batch-status.component.sass']\r\n})\r\nexport class CompanyBatchStatusComponent implements OnInit {\r\n    isLoading: boolean;\r\n    companyUniqueId: string;\r\n    batchId: string;\r\n    batchDataStatus: BatchData.Status;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.batchId = this.activatedRoute.snapshot.paramMap.get('batchId');\r\n        this.companyService\r\n            .getBatchStatus(this.companyUniqueId, this.batchId)\r\n            .subscribe({\r\n                next: (batchDataStatus) => this.batchDataStatus = batchDataStatus,\r\n                error: () => this.isLoading = false,\r\n                complete: () => this.isLoading = false\r\n            });\r\n    }\r\n}\r\n","<ct-section *ngIf=\"!isLoading\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-heading>Batch #{{batchDataStatus?.batchId}}</ct-heading>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-pre>{{batchDataStatus?.console}}</ct-pre>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n</ct-section>","import { Component, OnInit } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AccountResult } from '@src/app/services/accounts';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\n\r\n@Component({\r\n    selector: 'account-edit',\r\n    templateUrl: './account-edit.component.html',\r\n    styleUrls: ['./account-edit.component.sass']\r\n})\r\nexport class AccountEditComponent implements OnInit {\r\n\r\n    companyUniqueId: string;\r\n    accountId: string;\r\n    accountResult: AccountResult;\r\n    operationStatusRest: OperationStatusRest;\r\n    isEnabled: boolean;\r\n    publicName: string;\r\n    username: string;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.accountId = this.activatedRoute.snapshot.paramMap.get('accountId');\r\n        this.companyService\r\n            .edit(this.companyUniqueId, this.accountId)\r\n            .subscribe(accountResult => {\r\n                this.accountResult = accountResult;\r\n                this.username = accountResult.account.username;\r\n                this.publicName = accountResult.account.publicName;\r\n                this.isEnabled = accountResult.account.enabled;\r\n            });\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../../../', 'accounts'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    saveChanges(): void {\r\n        this.companyService\r\n            .editFormCommit(this.accountId, this.publicName, this.isEnabled, this.companyUniqueId)\r\n            .subscribe((operationStatusRest: OperationStatusRest) => {\r\n                if (operationStatusRest.status === OperationStatus.OK) {\r\n                    this.back();\r\n                } else {\r\n                    this.operationStatusRest = operationStatusRest;\r\n                }\r\n            });\r\n    }\r\n}\r\n","<ct-cols align-items=\"baseline\" *ngIf=\"accountResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>Edit Account #{{accountId}} </ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\" disabled>\r\n                        <mat-label>Username</mat-label>\r\n                        <input matInput [value]=\"accountResult.account.username\" disabled />\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                        <mat-label>Public Name</mat-label>\r\n                        <input matInput [(ngModel)]=\"publicName\" />\r\n                    </mat-form-field>\r\n                    <br>\r\n                    <mat-checkbox [(ngModel)]=\"isEnabled\">Is account enabled?</mat-checkbox>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button (click)=\"back()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button (click)=\"saveChanges()\" color=\"primary\">Save Changes</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BatchesResult } from '@src/app/services/batch/BatchesResult';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { ConfirmationDialogMethod, QuestionData } from '@src/app/components/app-dialog-confirmation/app-dialog-confirmation.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport * as fileSaver from 'file-saver';\r\nimport { BatchExecState } from '@src/app/enums/BatchExecState';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { BatchData } from '@src/app/services/batch/BatchData';\r\nimport { BatchSelector } from '@src/app/services/batch/BatchSelector';\r\nimport { BatchService } from '@src/app/services/batch/batch.service';\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'company-batch-list',\r\n    templateUrl: './company-batch-list.component.html',\r\n    styleUrls: ['./company-batch-list.component.scss']\r\n})\r\nexport class CompanyBatchListComponent extends UIStateComponent implements OnInit {\r\n    companyUniqueId: string;\r\n    batchesResult: BatchesResult;\r\n    batches: BatchData.BatchExecInfo[];\r\n    dataSource: MatTableDataSource<BatchData.BatchExecInfo> = new MatTableDataSource([]);\r\n    selection: SelectionModel<BatchData.BatchExecInfo> = new SelectionModel<BatchData.BatchExecInfo>(true, []);\r\n\r\n    downloadSelector: BatchSelector = new BatchSelector();\r\n\r\n    constructor(\r\n        readonly authenticationService: AuthenticationService,\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        readonly dialog: MatDialog,\r\n        readonly translate: TranslateService,\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    checkAndToggleRowSeletion(batch: BatchData.BatchExecInfo): void {\r\n        if (\r\n            this.isFinished(batch) &&\r\n            !this.isExecContextDeleted(batch)\r\n        ) {\r\n            this.downloadSelector.toggle(batch);\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.updateTable('0');\r\n    }\r\n\r\n    isAllSelected(): boolean {\r\n        return this.selection.selected.length === this.dataSource.data.filter(b => b.batch.deleted).length;\r\n    }\r\n\r\n    masterToggle(): void {\r\n        this.isAllSelected() ?\r\n            this.selection.clear() :\r\n            this.dataSource.data.filter(b => b.batch.deleted).forEach(row => this.selection.select(row));\r\n    }\r\n\r\n    get columnsToDisplay(): string[] {\r\n        if (this.isRole.MasterOperator) {\r\n            return [\r\n                'check',\r\n                'id',\r\n                'createdOn',\r\n                'isBatchConsistent',\r\n                'isDeleted',\r\n                'sourceCode',\r\n                'execState',\r\n                'bts'\r\n            ];\r\n        } else {\r\n            return ['id',\r\n                'createdOn',\r\n                'isBatchConsistent',\r\n                'isDeleted',\r\n                'sourceCode',\r\n                'execState',\r\n                'bts'\r\n            ];\r\n        }\r\n    }\r\n\r\n    updateTable(pageNumber: string): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .batches(pageNumber, this.companyUniqueId)\r\n            .subscribe({\r\n                next: (batchesResult) => {\r\n                    this.batchesResult = batchesResult;\r\n                    this.batches = this.batchesResult.batches.content;\r\n                    this.dataSource = new MatTableDataSource(this.batches);\r\n                    this.selection.clear();\r\n                },\r\n                complete: () => this.isLoading = false,\r\n            });\r\n    }\r\n\r\n    isFinished(b: BatchData.BatchExecInfo): boolean {\r\n        if (b.batch.execState === BatchExecState.Finished ||\r\n            b.batch.execState === BatchExecState.Error ||\r\n            b.batch.execState === BatchExecState.Archived) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isExecContextDeleted(b: BatchData.BatchExecInfo): boolean {\r\n        return b.execContextDeleted;\r\n    }\r\n\r\n    prevPage(): void {\r\n        this.updateTable((this.batchesResult.batches.number - 1).toString());\r\n    }\r\n\r\n    nextPage(): void {\r\n        this.updateTable((this.batchesResult.batches.number + 1).toString());\r\n    }\r\n\r\n    @ConfirmationDialogMethod({\r\n        question: (batch: BatchData.BatchExecInfo): QuestionData => {\r\n            return {\r\n                text: marker('batch-company.delete-dialog.Do you want to delete Batch _batchId_'),\r\n                params: { batchId: batch.batch.id }\r\n            };\r\n        },\r\n        rejectTitle: `${marker('batch-company.delete-dialog.Cancel')}`,\r\n        resolveTitle: `${marker('batch-company.delete-dialog.Delete')}`,\r\n    })\r\n\r\n    deleteOne(batch: BatchData.BatchExecInfo): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .processBatchDeleteCommit(this.companyUniqueId, batch.batch.id.toString())\r\n            .subscribe({\r\n                complete: () => {\r\n                    this.updateTable(this.batchesResult.batches.number.toString());\r\n                }\r\n            });\r\n    }\r\n\r\n    @ConfirmationDialogMethod({\r\n        question: (): QuestionData => {\r\n            return {\r\n                text: marker('batch-company.delete-dialog.Do you want to delete Batches'),\r\n                params: {}\r\n            };\r\n        },\r\n        rejectTitle: `${marker('batch-company.delete-dialog.Cancel')}`,\r\n        resolveTitle: `${marker('batch-company.delete-dialog.Delete')}`,\r\n    })\r\n    deleteMany(): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .processBatchesBulkDeleteCommit(\r\n                this.companyUniqueId,\r\n                this.selection.selected\r\n                    .map(b => b.batch.id).toString()\r\n            )\r\n            .subscribe({\r\n                next: () => {\r\n                    this.updateTable(this.batchesResult.batches.number.toString());\r\n                }\r\n            });\r\n    }\r\n\r\n    downloadResult(el: BatchData.BatchExecInfo): void {\r\n        this.companyService\r\n            .downloadProcessingResult(this.companyUniqueId, el.batch.id.toString())\r\n            .subscribe((res) => {\r\n                const name: string = res.headers\r\n                    .get('Content-Disposition')\r\n                    .replace('filename*=UTF-8\\'\\'', '') || 'result.zip';\r\n                fileSaver.saveAs(res.body, name);\r\n            });\r\n    }\r\n    downloadOriginFile(el: BatchData.BatchExecInfo): void {\r\n        this.companyService\r\n            .downloadOriginFile(\r\n                this.companyUniqueId,\r\n                el.batch.id.toString(),\r\n                el.uploadedFileName\r\n            )\r\n            .subscribe((res) => {\r\n                const name: string = res.headers\r\n                    .get('Content-Disposition')\r\n                    .replace('filename*=UTF-8\\'\\'', '') || 'result.zip';\r\n                fileSaver.saveAs(res.body, name);\r\n            });\r\n    }\r\n\r\n    downloadResults(): void {\r\n        this.isLoading = true;\r\n        this.companyService.downloadProcessingResults(\r\n            this.downloadSelector.getList(),\r\n            this.companyUniqueId\r\n        ).subscribe(() => {\r\n            this.isLoading = false;\r\n            this.downloadSelector.clear();\r\n        });\r\n    }\r\n}\r\n","<ct-section *ngIf=\"batchesResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-heading> Batch </ct-heading>\r\n                </ct-flex-item>\r\n                <ct-flex-item>\r\n                    <ng-container *ngTemplateOutlet=\"uploadButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-table [isWaiting]=\"isLoading\">\r\n                <table class=\"mat-table\" mat-table [dataSource]=\"dataSource\">\r\n                    <ng-container matColumnDef=\"check\">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                            <mat-checkbox \r\n                                color=\"warn\"\r\n                                (change)=\"masterToggle()\"\r\n                                [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                                [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n                                <div class=\"check-area\"></div>\r\n                            </mat-checkbox>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ng-container *ngIf=\"el.batch.deleted\">\r\n                                <mat-checkbox \r\n                                    color=\"warn\"\r\n                                    (click)=\"$event.stopPropagation()\"\r\n                                    (change)=\"selection.toggle(el)\"\r\n                                    [checked]=\"selection.isSelected(el)\">\r\n                                    <div class=\"check-area\"></div>\r\n                                </mat-checkbox>\r\n                            </ng-container>\r\n                   \r\n                            <ng-container *ngIf=\"!el.batch.deleted\">\r\n                                <mat-checkbox disabled>\r\n                                    <div class=\"check-area\"></div>\r\n                                </mat-checkbox>\r\n                            </ng-container>\r\n                   \r\n                        </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"id\">\r\n                        <th mat-header-cell *matHeaderCellDef>ID</th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.batch.id}} </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"createdOn\">\r\n                        <th mat-header-cell *matHeaderCellDef>Created on </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            {{el.batch.createdOn | date:'MMM d, yyyy, HH:mm:ss'}} </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"isBatchConsistent\">\r\n                        <th mat-header-cell *matHeaderCellDef>Is batch consistent?</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> <span *ngIf=\"el.ok\">{{\r\n                                'batch.isBatchConsistent.true' | translate }}</span><span *ngIf=\"!el.ok\">{{\r\n                                'batch.isBatchConsistent.false' | translate }}</span></td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"isDeleted\">\r\n                        <th mat-header-cell *matHeaderCellDef>Is deleted? </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{ el.batch.deleted }} </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"sourceCode\">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                            <div class=\"no-wrap\">Source Code</div>\r\n                            <div class=\"no-wrap\">File Name</div>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <div class=\"no-wrap\">{{el.sourceCodeUid}}</div>\r\n                            <div class=\"no-wrap\">{{el.uploadedFileName}}</div>\r\n                        </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"execState\">\r\n                        <th mat-header-cell *matHeaderCellDef>Exec State</th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <span *ngIf=\"el.execState === -1\">Error</span>\r\n                            <span *ngIf=\"el.execState === 2\">Preparing</span>\r\n                            <span *ngIf=\"el.execState === 3\">Processing</span>\r\n                            <span *ngIf=\"el.execState === 4\">Finished</span>\r\n                        </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"bts\">\r\n                        <th mat-header-cell *matHeaderCellDef> </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ct-flex justify-content=\"flex-end\" gap=\"9px\">\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button \r\n                                        [routerLink]=\"['../','batch',el.batch.id]\"\r\n                                        [disabled]=\"!isFinished(el) || isExecContextDeleted(el)\" size=\"forTableRow\"\r\n                                        color=\"primary\">Status</button>\r\n                                </ct-flex-item>\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button \r\n                                        size=\"forTableRow\" \r\n                                        color=\"primary\"\r\n                                        [disabled]=\"!isFinished(el) || isExecContextDeleted(el)\"\r\n                                        (click)=\"downloadResult(el)\">\r\n                                        Result\r\n                                    </button>\r\n                                </ct-flex-item>\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button size=\"forTableRow\" color=\"primary\"\r\n                                        (click)=\"downloadOriginFile(el)\">\r\n                                        Origin File\r\n                                    </button>\r\n                                </ct-flex-item>\r\n                                <ng-container *ngIf=\"isRole.MasterOperator\">\r\n                                    <ct-flex-item>\r\n                                        <button mat-flat-button \r\n                                            color=\"warn\" \r\n                                            size=\"forTableRow\" \r\n                                            (click)=\"deleteOne(el)\"\r\n                                            title=\"Delete\" \r\n                                            [disabled]=\"!(el.batch.deleted && isFinished(el))\">\r\n                                            <mat-icon>delete</mat-icon>\r\n                                        </button>\r\n                                    </ct-flex-item>\r\n                                </ng-container>\r\n                   \r\n                            </ct-flex>\r\n                        </td>\r\n                    </ng-container>\r\n                   \r\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n                    <tr mat-row \r\n                        *matRowDef=\"let row; columns: columnsToDisplay;\"\r\n                        (click)=\"checkAndToggleRowSeletion(row)\"\r\n                        [class.selected-color]=\"downloadSelector.isSelected(row)\"\r\n                        ></tr>\r\n                </table>\r\n            </ct-table>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n    <ct-section-footer>\r\n        <ng-container *ngIf=\"isRole.MasterOperator\">\r\n            <ct-section-footer-row>\r\n                <button mat-flat-button \r\n                    color=\"warn\" \r\n                    (click)=\"deleteMany()\" \r\n                    [disabled]=\"isLoading || selection.selected.length === 0\"\r\n                    title=\"Delete Checked\">\r\n                    Delete Checked\r\n                </button>\r\n            </ct-section-footer-row>\r\n        </ng-container>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-table-pagination (prev)=\"prevPage()\" (next)=\"nextPage()\"\r\n                        [pageableDefault]=\"batchesResult.batches\"></ct-table-pagination>\r\n                </ct-flex-item>\r\n\r\n                <ng-container *ngIf=\"downloadSelector.size > 0\">\r\n                    <ct-flex-item>\r\n                        <ng-container *ngTemplateOutlet=\"downloadButtonsTemplate\"></ng-container>\r\n                    </ct-flex-item>\r\n                </ng-container>\r\n\r\n                <ct-flex-item>\r\n                    <ng-container *ngTemplateOutlet=\"uploadButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>\r\n\r\n\r\n\r\n<ng-template #downloadButtonsTemplate>\r\n    <ct-flex justify-content=\"center\" gap=\"unit(1)\" align-items=\"center\">\r\n        <ct-flex-item>\r\n            <div class=\"selected-count\">\r\n                Selected × {{downloadSelector.size}}\r\n            </div>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <button mat-flat-button \r\n                color=\"primary\" \r\n                (click)=\"downloadResults()\" \r\n                [disabled]=\"isLoading\">\r\n                Download\r\n            </button>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <button mat-flat-button \r\n                [disabled]=\"isLoading\"\r\n                (click)=\"downloadSelector.clear()\"\r\n                color=\"primary\">\r\n                Discard\r\n            </button>\r\n        </ct-flex-item>\r\n    </ct-flex>\r\n</ng-template>\r\n\r\n\r\n\r\n<ng-template #uploadButtonTemplate>\r\n    <ng-container *ngIf=\"isRole.MasterOperator\">\r\n        <button mat-flat-button color=\"primary\" [routerLink]=\"['upload']\">Upload files and start\r\n            processing</button>\r\n    </ng-container>\r\n</ng-template>","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { AccountWithRoleResult } from '@src/app/services/company/AccountWithRoleResult';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\n\r\n@Component({\r\n    selector: 'account-edit-roles',\r\n    templateUrl: './account-edit-roles.component.html',\r\n    styleUrls: ['./account-edit-roles.component.sass']\r\n})\r\nexport class AccountEditRolesComponent implements OnInit {\r\n\r\n    accountId: string;\r\n    companyUniqueId: string;\r\n    accountWithRoleResult: AccountWithRoleResult;\r\n    operationStatusRest: OperationStatusRest;\r\n    roleModel: Map<string, boolean> = new Map();\r\n\r\n    isLoading: boolean;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        this.accountId = this.activatedRoute.snapshot.paramMap.get('accountId');\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.companyService\r\n            .editRoles(this.accountId, this.companyUniqueId)\r\n            .subscribe(accountWithRoleResult => {\r\n                this.accountWithRoleResult = accountWithRoleResult;\r\n                this.accountWithRoleResult.possibleRoles.forEach(r => this.roleModel.set(r, false));\r\n                this.accountWithRoleResult.account.authorities.forEach(a => {\r\n                    if (this.roleModel.has(a.authority)) {\r\n                        this.roleModel.set(a.authority, true);\r\n                    }\r\n                });\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    save(role: { key: string, value: boolean }): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .rolesEditFormCommit(this.accountId, role.key, role.value, this.companyUniqueId)\r\n            .subscribe((operationStatusRest: OperationStatusRest) => {\r\n                this.operationStatusRest = operationStatusRest;\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n}\r\n","<ct-cols *ngIf=\"accountWithRoleResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>\r\n                        Edit Account #{{accountId}} Roles\r\n                    </ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <div *ngFor=\"let el of roleModel | keyvalue\" style=\"margin: 0.5em 0\">\r\n                        <mat-checkbox [(ngModel)]=\"el.value\" (change)=\"save(el)\" [disabled]=\"isLoading\">{{ el.key}}\r\n                        </mat-checkbox>\r\n                    </div>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\n\r\n@Component({\r\n    selector: 'company-add',\r\n    templateUrl: './company-add.component.html',\r\n    styleUrls: ['./company-add.component.sass']\r\n})\r\nexport class CompanyAddComponent {\r\n    operationStatusRest: OperationStatusRest;\r\n\r\n    form: FormGroup = new FormGroup({\r\n        name: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(1)\r\n        ]),\r\n    });\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute\r\n    ) { }\r\n\r\n    createCompany(): void {\r\n        this.companyService\r\n            .addFormCommitCompany(this.form.value.name)\r\n            .subscribe((operationStatusRest) => {\r\n                if (operationStatusRest.status === OperationStatus.OK) {\r\n                    this.back();\r\n                } else {\r\n                    this.operationStatusRest = operationStatusRest;\r\n                }\r\n            });\r\n    }\r\n    back(): void {\r\n        this.router.navigate(['../', 'companies'], { relativeTo: this.activatedRoute });\r\n    }\r\n}\r\n","<ct-cols>\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>New Company</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body [formGroup]=\"form\">\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                        <mat-label>Name of company</mat-label>\r\n                        <input matInput=\"matInput\" formControlName=\"name\" />\r\n                        <mat-hint>This is a required field.</mat-hint>\r\n                    </mat-form-field>\r\n                    <br>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"unit(1)\">\r\n                        <ct-flex-item>\r\n                            <a mat-stroked-button [routerLink]=\"['../companies']\">Cancel</a>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button color=\"primary\" (click)=\"createCompany()\"\r\n                                [disabled]=\"form.invalid\">Create\r\n                                Company</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { SimpleCompaniesResult } from '@src/app/services/company/SimpleCompaniesResult';\r\nimport { SimpleCompany } from '@src/app/services/company/SimpleCompany';\r\nimport { DispatcherAssetModeService } from '@src/app/services/dispatcher-asset-mode/dispatcher-asset-mode.service';\r\n\r\n@Component({\r\n    selector: 'companies',\r\n    templateUrl: './companies.component.html',\r\n    styleUrls: ['./companies.component.sass']\r\n})\r\nexport class CompaniesComponent extends UIStateComponent implements OnInit {\r\n    columnsToDisplay: string[] = ['uniqueId', 'name', 'bts'];\r\n    simpleCompaniesResult: SimpleCompaniesResult;\r\n    dataSource: MatTableDataSource<SimpleCompany> = new MatTableDataSource([]);\r\n\r\n    constructor(\r\n        readonly authenticationService: AuthenticationService,\r\n        private companyService: CompanyService,\r\n        public dispatcherAssetModeService: DispatcherAssetModeService\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.updateTable(0);\r\n    }\r\n\r\n    updateTable(pageNumber: number): void {\r\n        this.setIsLoadingStart();\r\n        this.companyService\r\n            .companies(pageNumber.toString())\r\n            .subscribe({\r\n                next: simpleCompaniesResult => {\r\n                    this.simpleCompaniesResult = simpleCompaniesResult;\r\n                    this.dataSource = new MatTableDataSource(this.simpleCompaniesResult.companies.content);\r\n                },\r\n                complete: () => {\r\n                    this.setIsLoadingEnd();\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    prevPage(): void {\r\n        this.updateTable((this.simpleCompaniesResult.companies.number - 1));\r\n    }\r\n\r\n    nextPage(): void {\r\n        this.updateTable((this.simpleCompaniesResult.companies.number + 1));\r\n    }\r\n}\r\n","<ct-section *ngIf=\"simpleCompaniesResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-heading>Companies</ct-heading>\r\n                </ct-flex-item>\r\n                <ct-flex-item *ngIf=\"!dispatcherAssetModeService.isReplicated(simpleCompaniesResult.assetMode)\">\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-header-row>\r\n        <ct-section-header-row *ngIf=\"dispatcherAssetModeService.isReplicated(simpleCompaniesResult.assetMode)\">\r\n            <ct-alert theme=\"info\">\r\n                Management of companies are disabled, assetMode is 'replicated'.\r\n            </ct-alert>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ng-container *ngTemplateOutlet=\"mainTableTemplate\"></ng-container>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n    <ct-section-footer>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-table-pagination (prev)=\"prevPage()\" (next)=\"nextPage()\"\r\n                        [pageableDefault]=\"simpleCompaniesResult.companies\"></ct-table-pagination>\r\n                </ct-flex-item>\r\n                <ct-flex-item *ngIf=\"!dispatcherAssetModeService.isReplicated(simpleCompaniesResult.assetMode)\">\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>\r\n\r\n\r\n\r\n<ng-template #mainTableTemplate>\r\n    <ct-table [isWaiting]=\"isLoading\">\r\n        <table class=\"mat-table\" mat-table=\"mat-table\" [dataSource]=\"dataSource\">\r\n            <ng-container matColumnDef=\"uniqueId\">\r\n                <th mat-header-cell *matHeaderCellDef>Id</th>\r\n                <td mat-cell=\"mat-cell\" *matCellDef=\"let el\">{{el.uniqueId}} </td>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef>Name</th>\r\n                <td mat-cell=\"mat-cell\" *matCellDef=\"let el\">{{el.name}} </td>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"bts\">\r\n                <th mat-header-cell *matHeaderCellDef> </th>\r\n                <td mat-cell=\"mat-cell\" *matCellDef=\"let el\">\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"9px\">\r\n                        <ng-container *ngIf=\"authenticationService.isRoleMasterAdmin()\">\r\n                            <ng-container\r\n                                *ngIf=\"!dispatcherAssetModeService.isReplicated(simpleCompaniesResult.assetMode)\">\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button color=\"primary\" size=\"forTableRow\"\r\n                                        [routerLink]=\"['../',el.uniqueId,'edit']\">Edit</a>\r\n                                </ct-flex-item>\r\n                            </ng-container>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"authenticationService.isRoleMasterAdmin()\">\r\n                            <ct-flex-item>\r\n                                <a mat-flat-button color=\"primary\" size=\"forTableRow\"\r\n                                    [routerLink]=\"['../',el.uniqueId,'accounts']\">Accounts</a>\r\n                            </ct-flex-item>\r\n                        </ng-container>\r\n\r\n                        <ng-container\r\n                            *ngIf=\"authenticationService.isRoleMasterOperator() || authenticationService.isRoleMasterSupport()\">\r\n                            <ng-container *ngIf=\"el.id !== 1\">\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button color=\"primary\" size=\"forTableRow\"\r\n                                        [routerLink]=\"['../',el.uniqueId,'batches']\">Batches</a>\r\n                                </ct-flex-item>\r\n                            </ng-container>\r\n                        </ng-container>\r\n                    </ct-flex>\r\n                </td>\r\n            </ng-container>\r\n            <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\"></tr>\r\n        </table>\r\n    </ct-table>\r\n</ng-template>\r\n\r\n\r\n\r\n<ng-template #addButtonTemplate>\r\n    <button mat-flat-button color=\"primary\" routerLink=\"../add\"> Add New Company </button>\r\n</ng-template>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BatchData } from '@src/app/services/batch/BatchData';\r\nimport { BatchService } from '@src/app/services/batch/batch.service';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { SourceCode } from '@src/app/services/source-codes/SourceCode';\r\nimport { SourceCodesForCompany } from '@src/app/services/source-codes/SourceCodesForCompany';\r\nimport { SourceCodeUidsForCompany } from '@src/app/services/source-codes/SourceCodeUidsForCompany';\r\nimport { CtFileUploadComponent } from '../../ct/ct-file-upload/ct-file-upload.component';\r\n\r\n@Component({\r\n    selector: 'company-batch-upload',\r\n    templateUrl: './company-batch-upload.component.html',\r\n    styleUrls: ['./company-batch-upload.component.sass']\r\n})\r\nexport class CompanyBatchUploadComponent implements OnInit {\r\n    @ViewChild('fileUpload') fileUpload: CtFileUploadComponent;\r\n\r\n    batchId: string;\r\n    companyUniqueId: string;\r\n    sourceCodesForCompany: SourceCodesForCompany;\r\n    sourceCode: SourceCode;\r\n    file: File;\r\n    batchDataUploadingStatus: BatchData.UploadingStatus;\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.batchId = this.activatedRoute.snapshot.paramMap.get('batchId');\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n\r\n        this.companyService\r\n            .sourceCodesForCompany(this.companyUniqueId)\r\n            .subscribe(sourceCodesForCompany => {\r\n                this.sourceCodesForCompany = sourceCodesForCompany;\r\n            });\r\n    }\r\n\r\n    fileUploadChanged(): void {\r\n        this.file = this.fileUpload.fileInput.nativeElement.files[0] || false;\r\n    }\r\n\r\n    upload(): void {\r\n        this.companyService\r\n            .uploadFile(this.companyUniqueId, this.sourceCode.id.toString(), this.file)\r\n            .subscribe(batchDataUploadingStatus => {\r\n                this.batchDataUploadingStatus = batchDataUploadingStatus;\r\n            });\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../'], { relativeTo: this.activatedRoute });\r\n    }\r\n}\r\n\r\n","<ct-cols *ngIf=\"sourceCodesForCompany\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>{{ 'batch-add.Upload file for processing' | translate }}</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\" style=\"width:100%\">\r\n                        <mat-label> {{ 'batch-add.List of Source Codes' | translate }}</mat-label>\r\n                        <mat-select [(ngModel)]=\"sourceCode\">\r\n                            <div *ngFor=\"let sourceCode of sourceCodesForCompany.items\">\r\n                                <mat-option [value]=\"sourceCode\">{{sourceCode.uid}}</mat-option>\r\n                            </div>\r\n                        </mat-select>\r\n                        <mat-hint>{{ 'batch-add.This is a required field.' | translate }}</mat-hint>\r\n                    </mat-form-field>\r\n\r\n                    <br>\r\n                    <br>\r\n\r\n                    <div>\r\n                        <ct-file-upload #fileUpload acceptTypes=\".zip, .xml\"\r\n                            buttonTitle=\"{{'batch-add.Select File' | translate}}\" (changed)=\"fileUploadChanged()\">\r\n                        </ct-file-upload>\r\n                        <ct-hint>{{ 'batch-add.This is a required field.' | translate }}</ct-hint>\r\n                        <ct-hint>{{ 'batch-add.Only .xml and .zip files are supported' | translate }}</ct-hint>\r\n                    </div>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\">\r\n                                {{ 'batch-add.Cancel' | translate }}</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" color=\"primary\" [disabled]=\"!sourceCode || !file\"\r\n                                (click)=\"upload()\"> {{ 'batch-add.Upload-File-button' | translate }}</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"batchDataUploadingStatus\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { generateFormData } from '@src/app/helpers/generateFormData';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { environment } from '@src/environments/environment';\r\nimport { from, Observable, of, Subscription } from 'rxjs';\r\nimport { SimpleCompaniesResult } from './SimpleCompaniesResult';\r\nimport { SimpleCompanyResult } from './SimpleCompanyResult';\r\nimport { NewAccount, AccountsResult, AccountResult } from '../accounts';\r\nimport { AccountWithRoleResult } from './AccountWithRoleResult';\r\nimport { BatchesResult } from '../batch/BatchesResult';\r\nimport { BatchData } from '@src/app/services/batch/BatchData';\r\nimport { SourceCodesForCompany } from '../source-codes/SourceCodesForCompany';\r\nimport * as JSZip from 'jszip';\r\nimport { catchError, concatMap } from 'rxjs/operators';\r\nimport * as fileSaver from 'file-saver';\r\n\r\nconst url = (s: string): string => `${environment.baseUrl}dispatcher/company/${s}`;\r\n\r\ninterface ProcessableItem {\r\n    id: string;\r\n    companyId: string;\r\n    response: HttpResponse<Blob>;\r\n    fileName: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CompanyService {\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    companies = (page: string): Observable<SimpleCompaniesResult> =>\r\n        this.http.get<SimpleCompaniesResult>(url('companies'), { params: { page } })\r\n\r\n    addFormCommitCompany = (companyName: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url('company-add-commit'),\r\n            generateFormData({\r\n                companyName\r\n            }))\r\n\r\n    editCompany = (companyUniqueId: string): Observable<SimpleCompanyResult> =>\r\n        this.http.get<SimpleCompanyResult>(url(`company-edit/${companyUniqueId}`))\r\n\r\n    editFormCommitCompany = (companyUniqueId: string, name: string, groups: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-edit-commit`),\r\n            generateFormData({\r\n                companyUniqueId,\r\n                name,\r\n                groups\r\n            }))\r\n\r\n    accounts = (page: string, companyUniqueId: string): Observable<AccountsResult> =>\r\n        this.http.get<AccountsResult>(url(`company-accounts/${companyUniqueId}`), { params: { page } })\r\n\r\n    addFormCommitNewAccount = (account: NewAccount, companyUniqueId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-account-add-commit/${companyUniqueId}`), account)\r\n\r\n    edit = (companyUniqueId: string, id: string): Observable<AccountResult> =>\r\n        this.http.get<AccountResult>(url(`company-account-edit/${companyUniqueId}/${id}`))\r\n\r\n\r\n\r\n    // @PostMapping(\"/company-account-edit-commit/{companyUniqueId}\")\r\n    // @PreAuthorize(\"hasAnyRole('MASTER_ADMIN')\")\r\n    // public OperationStatusRest editFormCommit(Long id, String publicName, boolean enabled, @PathVariable Long companyUniqueId) {\r\n    //     OperationStatusRest operationStatusRest = companyAccountTopLevelService.editFormCommit(id, publicName, enabled, companyUniqueId);\r\n    //     return operationStatusRest;\r\n    // }\r\n\r\n    editFormCommit = (id: string, publicName: string, enabled: boolean, companyUniqueId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-account-edit-commit/${companyUniqueId}`),\r\n            generateFormData({\r\n                id, publicName, enabled, companyUniqueId\r\n            }))\r\n\r\n    passwordEdit = (accountId: string, companyUniqueId: string): Observable<AccountResult> =>\r\n        this.http.get<AccountResult>(url(`company-account-password-edit/${companyUniqueId}/${accountId}`))\r\n\r\n    passwordEditFormCommit = (id: string, password: string, password2: string, companyUniqueId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-account-password-edit-commit/${companyUniqueId}`),\r\n            generateFormData({\r\n                id, password, password2, companyUniqueId\r\n            }))\r\n\r\n    editRoles = (accountId: string, companyUniqueId: string): Observable<AccountWithRoleResult> =>\r\n        this.http.get<AccountWithRoleResult>(url(`company-account-edit-roles/${companyUniqueId}/${accountId}`))\r\n\r\n    rolesEditFormCommit = (accountId: string, role: string, checkbox: boolean, companyId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-account-edit-roles-commit/${companyId}`),\r\n            generateFormData({\r\n                accountId, role, checkbox, companyId\r\n            }))\r\n\r\n    //\r\n    //\r\n    //\r\n    //\r\n\r\n    batches = (page: string, companyUniqueId: string): Observable<BatchesResult> =>\r\n        this.http.get<BatchesResult>(url(`batch/company-batches/${companyUniqueId}`), { params: { page } })\r\n\r\n    processBatchDelete = (companyUniqueId: string, batchId: string): Observable<BatchData.Status> =>\r\n        this.http.get<BatchData.Status>(url(`batch/company-batch-delete/${companyUniqueId}/${batchId}`))\r\n\r\n    processBatchDeleteCommit = (companyUniqueId: string, batchId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`batch/company-batch-delete-commit/${companyUniqueId}`),\r\n            generateFormData({ batchId })\r\n        )\r\n\r\n    processBatchesBulkDeleteCommit = (companyUniqueId: string, batchIds: string): Observable<BatchData.BulkOperations> =>\r\n        this.http.post<BatchData.BulkOperations>(\r\n            url(`batch/company-batch-bulk-delete-commit/${companyUniqueId}`),\r\n            generateFormData({ batchIds })\r\n        )\r\n\r\n    uploadFile = (companyUniqueId: string, sourceCodeId: string, file: File): Observable<BatchData.UploadingStatus> =>\r\n        this.http.post<BatchData.UploadingStatus>(\r\n            url(`batch/company-batch-upload-from-file/${companyUniqueId}`),\r\n            generateFormData({\r\n                sourceCodeId,\r\n                file\r\n            })\r\n        )\r\n\r\n    getBatchStatus = (companyUniqueId: string, batchId: string): Observable<BatchData.Status> =>\r\n        this.http.get<BatchData.Status>(url(`batch/company-batch-status/${companyUniqueId}/${batchId}`))\r\n\r\n    downloadProcessingResult = (companyUniqueId: string, batchId: string): Observable<HttpResponse<Blob>> => {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/octet-stream');\r\n        return this.http.get(url(`batch/company-batch-download-result/${companyUniqueId}/${batchId}`), {\r\n            headers,\r\n            observe: 'response',\r\n            responseType: 'blob'\r\n        });\r\n    }\r\n\r\n    downloadOriginFile = (companyUniqueId: string, batchId: string, fileName: string): Observable<HttpResponse<Blob>> => {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/octet-stream');\r\n        return this.http.get(url(`batch/company-batch-download-origin-file/${companyUniqueId}/${batchId}/${fileName}`), {\r\n            headers,\r\n            observe: 'response',\r\n            responseType: 'blob'\r\n        });\r\n    }\r\n\r\n    sourceCodesForCompany = (companyUniqueId: string): Observable<SourceCodesForCompany> =>\r\n        this.http.get<SourceCodesForCompany>(\r\n            url(`batch/company-batch-source-codes/${companyUniqueId}`)\r\n        )\r\n\r\n    downloadProcessingResults(list: number[], companyId: string): Observable<boolean> {\r\n        const zipFileName: string = 'result ' + list.toString() + '.zip';\r\n        const zip: JSZip = new JSZip();\r\n        const processable: ProcessableItem[] = list.map(el => ({\r\n            id: el.toString(),\r\n            fileName: 'empty',\r\n            response: null,\r\n            companyId\r\n        }));\r\n        return new Observable<boolean>(sub => {\r\n            from(processable)\r\n                .pipe(\r\n                    concatMap(item => this.downloadProcessingResult(item.companyId, item.id)\r\n                        .pipe(\r\n                            catchError(err => of(err)),\r\n                            this.parseProcessableItemOperator(item),\r\n                        )\r\n                    )\r\n                )\r\n                .subscribe({\r\n                    next: e => { },\r\n                    error: error => sub.error(error),\r\n                    complete: () => {\r\n                        processable.forEach(item => {\r\n                            zip.file(item.fileName, item.response.body);\r\n                        });\r\n                        zip.generateAsync({ type: 'blob' }).then((blob: Blob) => {\r\n                            fileSaver.saveAs(blob, zipFileName);\r\n                        });\r\n                        sub.next(true);\r\n                        sub.complete();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    private parseProcessableItemOperator(item: ProcessableItem): (source: Observable<HttpResponse<Blob>>) => Observable<Subscription> {\r\n        return (source: Observable<HttpResponse<Blob>>) =>\r\n            new Observable<Subscription>(observer => {\r\n                return source.subscribe(\r\n                    {\r\n                        next: response => {\r\n                            item.response = response;\r\n                            item.fileName = response.ok ?\r\n                                `${item.id}.zip` :\r\n                                `${item.id} error`;\r\n                            observer.next();\r\n                        },\r\n                        error: error => observer.error(error),\r\n                        complete: () => observer.complete(),\r\n                    }\r\n                );\r\n            });\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { SimpleCompanyResult } from '@src/app/services/company/SimpleCompanyResult';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\n\r\n@Component({\r\n    selector: 'company-edit',\r\n    templateUrl: './company-edit.component.html',\r\n    styleUrls: ['./company-edit.component.sass']\r\n})\r\nexport class CompanyEditComponent implements OnInit {\r\n\r\n    companyUniqueId: string;\r\n    name: string;\r\n    groups: string;\r\n    operationStatusRest: OperationStatusRest;\r\n    simpleCompanyResult: SimpleCompanyResult;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.companyService\r\n            .editCompany(this.companyUniqueId)\r\n            .subscribe(simpleCompanyResult => {\r\n                this.simpleCompanyResult = simpleCompanyResult;\r\n                this.name = simpleCompanyResult.company.name;\r\n                this.groups = simpleCompanyResult.companyAccessControl.groups;\r\n            });\r\n    }\r\n\r\n    saveChanges(): void {\r\n        this.companyService\r\n            .editFormCommitCompany(this.companyUniqueId, this.name, this.groups)\r\n            .subscribe(operationStatusRest => {\r\n                if (operationStatusRest.status === OperationStatus.OK) {\r\n                    this.back();\r\n                } else {\r\n                    this.operationStatusRest = operationStatusRest;\r\n                }\r\n            });\r\n    }\r\n    back(): void {\r\n        this.router.navigate(['../../companies'], { relativeTo: this.activatedRoute });\r\n    }\r\n}\r\n","<ct-cols *ngIf=\"simpleCompanyResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>Edit Company</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                        <mat-label>Name of company</mat-label>\r\n                        <input matInput=\"matInput\" [(ngModel)]=\"name\" />\r\n                        <mat-hint>This is a required field.</mat-hint>\r\n                    </mat-form-field>\r\n                    <br>\r\n                    <br>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                        <mat-label>Company's groups</mat-label>\r\n                        <input matInput=\"matInput\" [(ngModel)]=\"groups\" />\r\n                    </mat-form-field>\r\n                    <br>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"unit(1)\">\r\n                        <ct-flex-item>\r\n                            <a mat-stroked-button [routerLink]=\"['../../companies']\">Cancel</a>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button color=\"primary\" (click)=\"saveChanges()\">Save Changes</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DispatcherAssetMode } from '@src/app/enums/DispatcherAssetMode';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AccountsResult } from '@src/app/services/accounts/AccountsResult';\r\nimport { SimpleAccount } from '@src/app/services/accounts/SimpleAccount';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { DispatcherAssetModeService } from '@src/app/services/dispatcher-asset-mode/dispatcher-asset-mode.service';\r\n\r\n@Component({\r\n    selector: 'accounts',\r\n    templateUrl: './accounts.component.html',\r\n    styleUrls: ['./accounts.component.sass']\r\n})\r\nexport class AccountsComponent extends UIStateComponent implements OnInit {\r\n    dataSource: MatTableDataSource<SimpleAccount> = new MatTableDataSource<SimpleAccount>([]);\r\n    columnsToDisplay: string[] = ['id', 'isEnabled', 'login', 'publicName', 'role', 'createdOn', 'bts'];\r\n    accountsResult: AccountsResult;\r\n    companyUniqueId: string;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        public dispatcherAssetModeService: DispatcherAssetModeService,\r\n        readonly authenticationService: AuthenticationService\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.updateTable(0);\r\n    }\r\n\r\n    updateTable(page: number): void {\r\n        this.setIsLoadingStart();\r\n        this.companyService\r\n            .accounts(page.toString(), this.companyUniqueId)\r\n            .subscribe({\r\n                next: accountsResult => {\r\n                    this.accountsResult = accountsResult;\r\n                    this.dataSource = new MatTableDataSource(this.accountsResult.accounts.content || []);\r\n                },\r\n                complete: () => {\r\n                    this.setIsLoadingEnd();\r\n                }\r\n            });\r\n    }\r\n\r\n    nextPage(): void {\r\n        this.updateTable(this.accountsResult.accounts.number + 1);\r\n    }\r\n\r\n    prevPage(): void {\r\n        this.updateTable(this.accountsResult.accounts.number - 1);\r\n    }\r\n}\r\n","<ct-section *ngIf=\"accountsResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-heading>Accounts</ct-heading>\r\n                </ct-flex-item>\r\n                <ct-flex-item *ngIf=\"!dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-header-row>\r\n        <ct-section-header-row *ngIf=\"dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n            <ct-alert theme=\"info\">\r\n                Management of accounts are disabled, assetMode is 'replicated'.\r\n            </ct-alert>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-table [isWaiting]=\"isLoading\">\r\n                <table mat-table [dataSource]=\"dataSource\">\r\n                    <ng-container matColumnDef=\"id\">\r\n                        <th mat-header-cell *matHeaderCellDef>ID </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.id}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"isEnabled\">\r\n                        <th mat-header-cell *matHeaderCellDef>Is enabled </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.enabled ? 'Yes':'No'}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"login\">\r\n                        <th mat-header-cell *matHeaderCellDef>Login </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.username}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"publicName\">\r\n                        <th mat-header-cell *matHeaderCellDef>Public name </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.publicName}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"role\">\r\n                        <th mat-header-cell *matHeaderCellDef>Roles</th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.roles}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"createdOn\">\r\n                        <th mat-header-cell *matHeaderCellDef>Created On </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            {{el.createdOn | date:'HH:mm:ss, MMM&nbsp;d,&nbsp;yyyy'}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"bts\">\r\n                        <th mat-header-cell *matHeaderCellDef> </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ct-flex justify-content=\"flex-end\" gap=\"9px\"\r\n                                *ngIf=\"!dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button size=\"forTableRow\" [routerLink]=\"['../','account',el.id,'edit']\"\r\n                                        color=\"primary\"> Edit</a>\r\n                                </ct-flex-item>\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button size=\"forTableRow\"\r\n                                        [routerLink]=\"['../','account',el.id,'edit-roles']\" color=\"primary\">Roles</a>\r\n                                </ct-flex-item>\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button size=\"forTableRow\"\r\n                                        [routerLink]=\"['../','account',el.id,'edit-password']\" color=\"primary\">\r\n                                        Change Password</a>\r\n                                </ct-flex-item>\r\n                            </ct-flex>\r\n                        </td>\r\n                    </ng-container>\r\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"> </tr>\r\n                    <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\"> </tr>\r\n                </table>\r\n            </ct-table>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n    <ct-section-footer>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-flex justify-content=\"flex-start\" gap=\"8px\">\r\n                        <ct-table-pagination (prev)=\"prevPage()\" (next)=\"nextPage()\"\r\n                            [pageableDefault]=\"accountsResult.accounts\"></ct-table-pagination>\r\n                    </ct-flex>\r\n                </ct-flex-item>\r\n                <ct-flex-item *ngIf=\"!dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>\r\n\r\n\r\n<ng-template #addButtonTemplate>\r\n    <button mat-flat-button color=\"primary\" [routerLink]=\"['../','account','add']\">\r\n        Add New Account\r\n    </button>\r\n</ng-template>","import { Component, OnInit } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormGroup, FormControl, Validators, ValidationErrors } from '@angular/forms';\r\nimport { AccountResult } from '@src/app/services/accounts/AccountResult';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\n\r\n@Component({\r\n    selector: 'account-edit-password',\r\n    templateUrl: './account-edit-password.component.html',\r\n    styleUrls: ['./account-edit-password.component.sass']\r\n})\r\nexport class AccountEditPasswordComponent implements OnInit {\r\n    accountResult: AccountResult;\r\n    accoundId: string;\r\n    companyUniqueId: string;\r\n    operationStatusRest: OperationStatusRest;\r\n\r\n    form = new FormGroup({\r\n        password: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3)\r\n        ]),\r\n        password2: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            (control: FormControl): ValidationErrors | null => {\r\n                const group: FormGroup = this.form;\r\n                if (group) {\r\n                    return (group.value.password === control.value) ? null : {\r\n                        notSame: true\r\n                    };\r\n                }\r\n                return null;\r\n            }\r\n        ]),\r\n    });\r\n\r\n    isLoading: boolean;\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        private companyService: CompanyService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        this.accoundId = this.activatedRoute.snapshot.paramMap.get('accountId');\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.companyService\r\n            .passwordEdit(this.accoundId, this.companyUniqueId)\r\n            .subscribe({\r\n                next: accountResult => this.accountResult = accountResult,\r\n                complete: () => this.isLoading = false\r\n            });\r\n    }\r\n\r\n\r\n    back(): void {\r\n        this.router.navigate(['../../../', 'accounts'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    saveChanges(): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .passwordEditFormCommit(this.accoundId, this.form.value.password, this.form.value.password2, this.companyUniqueId)\r\n            .subscribe({\r\n                next: operationStatusRest => this.operationStatusRest = operationStatusRest,\r\n                complete: () => this.isLoading = false\r\n            });\r\n    }\r\n\r\n}\r\n","<ct-cols align-items=\"baseline\" *ngIf=\"accountResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>Edit Account </ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <form [formGroup]=\"form\" novalidate=\"novalidate\" autocomplete=\"off\">\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Password</mat-label>\r\n                            <input matInput=\"matInput\" type=\"password\" autocomplete=\"new-password\"\r\n                                formControlName=\"password\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Password again</mat-label>\r\n                            <input matInput=\"matInput\" type=\"password\" autocomplete=\"new-password\"\r\n                                formControlName=\"password2\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                    </form>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" (click)=\"saveChanges()\" color=\"primary\"\r\n                                [disabled]=\"isLoading\">Save</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { CtModule } from '../ct/ct.module';\r\nimport { MaterialAppModule } from '@src/app/ngmaterial.module';\r\nimport { CompanyComponent } from './company/company.component';\r\nimport { CompaniesComponent } from './companies/companies.component';\r\nimport { CompanyEditComponent } from './company-edit/company-edit.component';\r\nimport { AccountsComponent } from './accounts/accounts.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CompanyAddComponent } from './company-add/company-add.component';\r\nimport { AccountAddComponent } from './account-add/account-add.component';\r\nimport { AccountEditComponent } from './account-edit/account-edit.component';\r\nimport { AccountEditPasswordComponent } from './account-edit-password/account-edit-password.component';\r\nimport { AccountEditRolesComponent } from './account-edit-roles/account-edit-roles.component';\r\nimport { CompanyBatchStatusComponent } from './company-batch-status/company-batch-status.component';\r\nimport { CompanyBatchUploadComponent } from './company-batch-upload/company-batch-upload.component';\r\nimport { CompanyBatchListComponent } from './company-batches/company-batch-list.component';\r\nimport { Role } from '@src/app/services/authentication';\r\nimport { RoleRouteGuard } from '@src/app/guards/role-route.guard';\r\n\r\n\r\nexport const CompanyRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CompanyComponent,\r\n    },\r\n    {\r\n        path: 'companies',\r\n        component: CompaniesComponent\r\n    },\r\n    {\r\n        path: ':companyUniqueId/edit',\r\n        canActivate: [RoleRouteGuard],\r\n        component: CompanyEditComponent,\r\n        data: {\r\n            backConfig: ['../', '../', 'companies'],\r\n            requiredRoles: [Role.MasterAdmin]\r\n        }\r\n    },\r\n    {\r\n        path: 'add',\r\n        component: CompanyAddComponent,\r\n        data: {\r\n            backConfig: ['../', 'companies']\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/accounts',\r\n        component: AccountsComponent,\r\n        canActivate: [RoleRouteGuard],\r\n        data: {\r\n            backConfig: ['../', '../', 'companies'],\r\n            requiredRoles: [Role.MasterAdmin]\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/account/add',\r\n        component: AccountAddComponent,\r\n        data: {\r\n            backConfig: ['../', '../', 'accounts']\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/account/:accountId/edit',\r\n        component: AccountEditComponent,\r\n        data: {\r\n            backConfig: ['../', '../', '../', 'accounts']\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/account/:accountId/edit-roles',\r\n        component: AccountEditRolesComponent,\r\n        data: {\r\n            backConfig: ['../', '../', '../', 'accounts']\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/account/:accountId/edit-password',\r\n        component: AccountEditPasswordComponent,\r\n        data: {\r\n            backConfig: ['../', '../', '../', 'accounts']\r\n        }\r\n    },\r\n    //\r\n    //\r\n    //\r\n    {\r\n        path: '1/batches',\r\n        redirectTo: 'companies'\r\n    },\r\n    {\r\n        path: ':companyUniqueId/batches',\r\n        component: CompanyBatchListComponent,\r\n        canActivate: [RoleRouteGuard],\r\n        data: {\r\n            backConfig: ['../', '../', 'companies'],\r\n            requiredRoles: [Role.MasterSupport, Role.MasterOpertator]\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/batches/upload',\r\n        component: CompanyBatchUploadComponent,\r\n        canActivate: [RoleRouteGuard],\r\n        data: {\r\n            backConfig: ['../'],\r\n            requiredRoles: [Role.MasterSupport, Role.MasterOpertator]\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/batch/:batchId',\r\n        component: CompanyBatchStatusComponent,\r\n        canActivate: [RoleRouteGuard],\r\n        data: {\r\n            backConfig: ['../', '../', 'batches'],\r\n            requiredRoles: [Role.MasterSupport, Role.MasterOpertator]\r\n        }\r\n    }\r\n];\r\n\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(CompanyRoutes)],\r\n    exports: [RouterModule],\r\n    declarations: []\r\n})\r\nexport class CompanyRoutingModule { }\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        CompanyRoutingModule,\r\n        CtModule,\r\n        MaterialAppModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        TranslateModule.forChild({})\r\n    ],\r\n    declarations: [\r\n        CompanyComponent,\r\n        CompaniesComponent,\r\n        CompanyEditComponent,\r\n        CompanyAddComponent,\r\n        AccountsComponent,\r\n        AccountAddComponent,\r\n        AccountEditComponent,\r\n        AccountEditPasswordComponent,\r\n        AccountEditRolesComponent,\r\n        CompanyBatchListComponent,\r\n        CompanyBatchStatusComponent,\r\n        CompanyBatchUploadComponent\r\n    ]\r\n})\r\nexport class CompnyModule { }"],"sourceRoot":"webpack:///"}