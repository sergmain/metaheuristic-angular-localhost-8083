{"version":3,"sources":["webpack:///src/app/modules/company/account-add/account-add.component.ts","webpack:///src/app/modules/company/account-add/account-add.component.html","webpack:///src/app/modules/company/company/company.component.ts","webpack:///src/app/modules/company/company/company.component.html","webpack:///src/app/modules/company/company-batch-status/company-batch-status.component.ts","webpack:///src/app/modules/company/company-batch-status/company-batch-status.component.html","webpack:///src/app/modules/company/account-edit/account-edit.component.ts","webpack:///src/app/modules/company/account-edit/account-edit.component.html","webpack:///src/app/modules/company/company-batches/company-batch-list.component.html","webpack:///src/app/modules/company/company-batches/company-batch-list.component.ts","webpack:///src/app/modules/company/account-edit-roles/account-edit-roles.component.ts","webpack:///src/app/modules/company/account-edit-roles/account-edit-roles.component.html","webpack:///src/app/modules/company/company-add/company-add.component.ts","webpack:///src/app/modules/company/company-add/company-add.component.html","webpack:///src/app/modules/company/companies/companies.component.ts","webpack:///src/app/modules/company/companies/companies.component.html","webpack:///src/app/modules/company/company-batch-upload/company-batch-upload.component.ts","webpack:///src/app/modules/company/company-batch-upload/company-batch-upload.component.html","webpack:///src/app/services/company/company.service.ts","webpack:///src/app/modules/company/company-edit/company-edit.component.ts","webpack:///src/app/modules/company/company-edit/company-edit.component.html","webpack:///src/app/modules/company/accounts/accounts.component.ts","webpack:///src/app/modules/company/accounts/accounts.component.html","webpack:///src/app/modules/company/account-edit-password/account-edit-password.component.ts","webpack:///src/app/modules/company/account-edit-password/account-edit-password.component.html","webpack:///src/app/modules/company/company.module.ts"],"names":["AccountAddComponent","activatedRoute","companyService","router","form","publicName","required","minLength","username","password","password2","control","group","value","notSame","isDone","isLoading","companyUniqueId","snapshot","paramMap","get","navigate","relativeTo","addFormCommitNewAccount","subscribe","next","operationStatusRest","complete","status","OK","reset","back","createAccount","CompanyComponent","CompanyBatchStatusComponent","batchId","getBatchStatus","batchDataStatus","error","AccountEditComponent","accountId","edit","accountResult","account","isEnabled","enabled","editFormCommit","$event","stopPropagation","selection","downloadSelector","CompanyBatchListComponent","authenticationService","dialog","translate","dataSource","batch","isFinished","isExecContextDeleted","toggle","updateTable","selected","length","data","filter","b","deleted","isAllSelected","clear","forEach","row","select","isRole","MasterOperator","pageNumber","batches","batchesResult","content","execState","Finished","Error","Archived","execContextDeleted","number","toString","processBatchDeleteCommit","id","processBatchesBulkDeleteCommit","map","el","downloadProcessingResult","res","name","headers","replace","body","downloadOriginFile","uploadedFileName","downloadProcessingResults","getList","question","text","params","rejectTitle","resolveTitle","AccountEditRolesComponent","roleModel","Map","editRoles","accountWithRoleResult","possibleRoles","r","set","authorities","a","has","authority","role","rolesEditFormCommit","key","CompanyAddComponent","addFormCommitCompany","createCompany","CompaniesComponent","dispatcherAssetModeService","columnsToDisplay","setIsLoadingStart","companies","simpleCompaniesResult","setIsLoadingEnd","CompanyBatchUploadComponent","sourceCodesForCompany","file","fileUpload","fileInput","nativeElement","files","uploadFile","sourceCode","batchDataUploadingStatus","url","s","baseUrl","CompanyService","http","page","companyName","post","editCompany","editFormCommitCompany","groups","accounts","passwordEdit","passwordEditFormCommit","checkbox","companyId","processBatchDelete","batchIds","sourceCodeId","append","observe","responseType","fileName","list","zipFileName","zip","processable","response","sub","pipe","item","err","parseProcessableItemOperator","e","generateAsync","type","then","blob","source","observer","ok","CompanyEditComponent","simpleCompanyResult","company","companyAccessControl","AccountsComponent","accountsResult","AccountEditPasswordComponent","accoundId","CompanyRoutes","path","component","canActivate","backConfig","requiredRoles","MasterAdmin","redirectTo","MasterSupport","MasterOpertator","CompanyRoutingModule","forChild","CompnyModule"],"mappings":"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","file":"src-app-modules-company-company-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { AccountResult } from '@src/app/services/accounts';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { FormGroup, FormControl, Validators, ValidationErrors } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\n\r\n@Component({\r\n    selector: 'account-add',\r\n    templateUrl: './account-add.component.html',\r\n    styleUrls: ['./account-add.component.sass']\r\n})\r\nexport class AccountAddComponent implements OnInit {\r\n    accountResult: AccountResult;\r\n    companyUniqueId: string;\r\n    operationStatusRest: OperationStatusRest;\r\n    isLoading: boolean;\r\n    isDone: boolean;\r\n\r\n    form = new FormGroup({\r\n        publicName: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3)\r\n        ]),\r\n        username: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3)\r\n        ]),\r\n        password: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3)\r\n        ]),\r\n        password2: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            (control: FormControl): ValidationErrors | null => {\r\n                const group: FormGroup = this.form;\r\n                if (group) {\r\n                    return (group.value.password === control.value) ? null : {\r\n                        notSame: true\r\n                    };\r\n                }\r\n                return null;\r\n            }\r\n        ]),\r\n    });\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        private companyService: CompanyService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isDone = false;\r\n        this.isLoading = true;\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.isLoading = false;\r\n\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../../', 'accounts'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    createAccount(): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .addFormCommitNewAccount({\r\n                username: this.form.value.username,\r\n                password: this.form.value.password,\r\n                password2: this.form.value.password2,\r\n                publicName: this.form.value.publicName\r\n            }, this.companyUniqueId)\r\n            .subscribe({\r\n                next: (operationStatusRest) => this.operationStatusRest = operationStatusRest,\r\n                complete: () => {\r\n                    if (this.operationStatusRest.status === OperationStatus.OK) {\r\n                        this.isDone = true;\r\n                        this.form.reset();\r\n                    }\r\n                    this.isLoading = false;\r\n                }\r\n            });\r\n    }\r\n}\r\n","<ct-cols align-items=\"baseline\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>New Account</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <form [formGroup]=\"form\" novalidate=\"novalidate\" autocomplete=\"off\">\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Name</mat-label>\r\n                            <input matInput=\"matInput\" type=\"text\" autocomplete=\"name\" formControlName=\"username\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Password</mat-label>\r\n                            <input matInput=\"matInput\" type=\"password\" autocomplete=\"new-password\"\r\n                                formControlName=\"password\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Password again</mat-label>\r\n                            <input matInput=\"matInput\" type=\"password\" autocomplete=\"new-password\"\r\n                                formControlName=\"password2\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Public Name</mat-label>\r\n                            <input matInput=\"matInput\" type=\"text\" autocomplete=\"name\" formControlName=\"publicName\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                    </form>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" (click)=\"createAccount()\" color=\"primary\"\r\n                                [disabled]=\"isDone || isLoading || form.invalid\">Create Account</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'company',\r\n  templateUrl: './company.component.html',\r\n  styleUrls: ['./company.component.sass']\r\n})\r\nexport class CompanyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>company works!</p>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BatchData } from '@src/app/services/batch/BatchData';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\n\r\n@Component({\r\n    selector: 'company-batch-status',\r\n    templateUrl: './company-batch-status.component.html',\r\n    styleUrls: ['./company-batch-status.component.sass']\r\n})\r\nexport class CompanyBatchStatusComponent implements OnInit {\r\n    isLoading: boolean;\r\n    companyUniqueId: string;\r\n    batchId: string;\r\n    batchDataStatus: BatchData.Status;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.batchId = this.activatedRoute.snapshot.paramMap.get('batchId');\r\n        this.companyService\r\n            .getBatchStatus(this.companyUniqueId, this.batchId)\r\n            .subscribe({\r\n                next: (batchDataStatus) => this.batchDataStatus = batchDataStatus,\r\n                error: () => this.isLoading = false,\r\n                complete: () => this.isLoading = false\r\n            });\r\n    }\r\n}\r\n","<ct-section *ngIf=\"!isLoading\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-heading>Batch #{{batchDataStatus?.batchId}}</ct-heading>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-pre>{{batchDataStatus?.console}}</ct-pre>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n</ct-section>","import { Component, OnInit } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AccountResult } from '@src/app/services/accounts';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\n\r\n@Component({\r\n    selector: 'account-edit',\r\n    templateUrl: './account-edit.component.html',\r\n    styleUrls: ['./account-edit.component.sass']\r\n})\r\nexport class AccountEditComponent implements OnInit {\r\n\r\n    companyUniqueId: string;\r\n    accountId: string;\r\n    accountResult: AccountResult;\r\n    operationStatusRest: OperationStatusRest;\r\n    isEnabled: boolean;\r\n    publicName: string;\r\n    username: string;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.accountId = this.activatedRoute.snapshot.paramMap.get('accountId');\r\n        this.companyService\r\n            .edit(this.companyUniqueId, this.accountId)\r\n            .subscribe(accountResult => {\r\n                this.accountResult = accountResult;\r\n                this.username = accountResult.account.username;\r\n                this.publicName = accountResult.account.publicName;\r\n                this.isEnabled = accountResult.account.enabled;\r\n            });\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../../../', 'accounts'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    saveChanges(): void {\r\n        this.companyService\r\n            .editFormCommit(this.accountId, this.publicName, this.isEnabled, this.companyUniqueId)\r\n            .subscribe((operationStatusRest: OperationStatusRest) => {\r\n                if (operationStatusRest.status === OperationStatus.OK) {\r\n                    this.back();\r\n                } else {\r\n                    this.operationStatusRest = operationStatusRest;\r\n                }\r\n            });\r\n    }\r\n}\r\n","<ct-cols align-items=\"baseline\" *ngIf=\"accountResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>Edit Account #{{accountId}} </ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\" disabled>\r\n                        <mat-label>Username</mat-label>\r\n                        <input matInput [value]=\"accountResult.account.username\" disabled />\r\n                    </mat-form-field>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                        <mat-label>Public Name</mat-label>\r\n                        <input matInput [(ngModel)]=\"publicName\" />\r\n                    </mat-form-field>\r\n                    <br>\r\n                    <mat-checkbox [(ngModel)]=\"isEnabled\">Is account enabled?</mat-checkbox>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button (click)=\"back()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button (click)=\"saveChanges()\" color=\"primary\">Save Changes</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","<ct-section *ngIf=\"batchesResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-heading> Batch </ct-heading>\r\n                </ct-flex-item>\r\n                <ct-flex-item>\r\n                    <ng-container *ngTemplateOutlet=\"uploadButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-table [isWaiting]=\"isLoading\">\r\n                <table class=\"mat-table\" mat-table [dataSource]=\"dataSource\">\r\n                    <ng-container matColumnDef=\"check\">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                            <mat-checkbox \r\n                                color=\"warn\"\r\n                                (change)=\"masterToggle()\"\r\n                                [checked]=\"selection.hasValue() && isAllSelected()\"\r\n                                [indeterminate]=\"selection.hasValue() && !isAllSelected()\">\r\n                                <div class=\"check-area\"></div>\r\n                            </mat-checkbox>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ng-container *ngIf=\"el.batch.deleted\">\r\n                                <mat-checkbox \r\n                                    color=\"warn\"\r\n                                    (click)=\"$event.stopPropagation()\"\r\n                                    (change)=\"selection.toggle(el)\"\r\n                                    [checked]=\"selection.isSelected(el)\">\r\n                                    <div class=\"check-area\"></div>\r\n                                </mat-checkbox>\r\n                            </ng-container>\r\n                   \r\n                            <ng-container *ngIf=\"!el.batch.deleted\">\r\n                                <mat-checkbox disabled>\r\n                                    <div class=\"check-area\"></div>\r\n                                </mat-checkbox>\r\n                            </ng-container>\r\n                   \r\n                        </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"id\">\r\n                        <th mat-header-cell *matHeaderCellDef>ID</th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.batch.id}} </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"createdOn\">\r\n                        <th mat-header-cell *matHeaderCellDef>Created on </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            {{el.batch.createdOn | date:'MMM d, yyyy, HH:mm:ss'}} </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"isBatchConsistent\">\r\n                        <th mat-header-cell *matHeaderCellDef>Is batch consistent?</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> <span *ngIf=\"el.ok\">{{\r\n                                'batch.isBatchConsistent.true' | translate }}</span><span *ngIf=\"!el.ok\">{{\r\n                                'batch.isBatchConsistent.false' | translate }}</span></td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"isDeleted\">\r\n                        <th mat-header-cell *matHeaderCellDef>Is deleted? </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{ el.batch.deleted }} </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"sourceCode\">\r\n                        <th mat-header-cell *matHeaderCellDef>\r\n                            <div class=\"no-wrap\">Source Code</div>\r\n                            <div class=\"no-wrap\">File Name</div>\r\n                        </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <div class=\"no-wrap\">{{el.sourceCodeUid}}</div>\r\n                            <div class=\"no-wrap\">{{el.uploadedFileName}}</div>\r\n                        </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"execState\">\r\n                        <th mat-header-cell *matHeaderCellDef>Exec State</th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <span *ngIf=\"el.execState === -1\">Error</span>\r\n                            <span *ngIf=\"el.execState === 2\">Preparing</span>\r\n                            <span *ngIf=\"el.execState === 3\">Processing</span>\r\n                            <span *ngIf=\"el.execState === 4\">Finished</span>\r\n                        </td>\r\n                    </ng-container>\r\n                   \r\n                    <ng-container matColumnDef=\"bts\">\r\n                        <th mat-header-cell *matHeaderCellDef> </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ct-flex justify-content=\"flex-end\" gap=\"9px\">\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button \r\n                                        [routerLink]=\"['../','batch',el.batch.id]\"\r\n                                        [disabled]=\"!isFinished(el) || isExecContextDeleted(el)\" size=\"forTableRow\"\r\n                                        color=\"primary\">Status</button>\r\n                                </ct-flex-item>\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button \r\n                                        size=\"forTableRow\" \r\n                                        color=\"primary\"\r\n                                        [disabled]=\"!isFinished(el) || isExecContextDeleted(el)\"\r\n                                        (click)=\"downloadResult(el)\">\r\n                                        Result\r\n                                    </button>\r\n                                </ct-flex-item>\r\n                                <ct-flex-item>\r\n                                    <button mat-flat-button size=\"forTableRow\" color=\"primary\"\r\n                                        (click)=\"downloadOriginFile(el)\">\r\n                                        Origin File\r\n                                    </button>\r\n                                </ct-flex-item>\r\n                                <ng-container *ngIf=\"isRole.MasterOperator\">\r\n                                    <ct-flex-item>\r\n                                        <button mat-flat-button \r\n                                            color=\"warn\" \r\n                                            size=\"forTableRow\" \r\n                                            (click)=\"deleteOne(el)\"\r\n                                            title=\"Delete\" \r\n                                            [disabled]=\"!(el.batch.deleted && isFinished(el))\">\r\n                                            <mat-icon>delete</mat-icon>\r\n                                        </button>\r\n                                    </ct-flex-item>\r\n                                </ng-container>\r\n                   \r\n                            </ct-flex>\r\n                        </td>\r\n                    </ng-container>\r\n                   \r\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n                    <tr mat-row \r\n                        *matRowDef=\"let row; columns: columnsToDisplay;\"\r\n                        (click)=\"checkAndToggleRowSeletion(row)\"\r\n                        [class.selected-color]=\"downloadSelector.isSelected(row)\"\r\n                        ></tr>\r\n                </table>\r\n            </ct-table>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n    <ct-section-footer>\r\n        <ng-container *ngIf=\"isRole.MasterOperator\">\r\n            <ct-section-footer-row>\r\n                <button mat-flat-button \r\n                    color=\"warn\" \r\n                    (click)=\"deleteMany()\" \r\n                    [disabled]=\"isLoading || selection.selected.length === 0\"\r\n                    title=\"Delete Checked\">\r\n                    Delete Checked\r\n                </button>\r\n            </ct-section-footer-row>\r\n        </ng-container>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-table-pagination (prev)=\"prevPage()\" (next)=\"nextPage()\"\r\n                        [pageableDefault]=\"batchesResult.batches\"></ct-table-pagination>\r\n                </ct-flex-item>\r\n\r\n                <ng-container *ngIf=\"downloadSelector.size > 0\">\r\n                    <ct-flex-item>\r\n                        <ng-container *ngTemplateOutlet=\"downloadButtonsTemplate\"></ng-container>\r\n                    </ct-flex-item>\r\n                </ng-container>\r\n\r\n                <ct-flex-item>\r\n                    <ng-container *ngTemplateOutlet=\"uploadButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>\r\n\r\n\r\n\r\n<ng-template #downloadButtonsTemplate>\r\n    <ct-flex justify-content=\"center\" gap=\"unit(1)\" align-items=\"center\">\r\n        <ct-flex-item>\r\n            <div class=\"selected-count\">\r\n                Selected × {{downloadSelector.size}}\r\n            </div>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <button mat-flat-button \r\n                color=\"primary\" \r\n                (click)=\"downloadResults()\" \r\n                [disabled]=\"isLoading\">\r\n                Download\r\n            </button>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <button mat-flat-button \r\n                [disabled]=\"isLoading\"\r\n                (click)=\"downloadSelector.clear()\"\r\n                color=\"primary\">\r\n                Discard\r\n            </button>\r\n        </ct-flex-item>\r\n    </ct-flex>\r\n</ng-template>\r\n\r\n\r\n\r\n<ng-template #uploadButtonTemplate>\r\n    <ng-container *ngIf=\"isRole.MasterOperator\">\r\n        <button mat-flat-button color=\"primary\" [routerLink]=\"['upload']\">Upload files and start\r\n            processing</button>\r\n    </ng-container>\r\n</ng-template>","import { Component, OnInit } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BatchesResult } from '@src/app/services/batch/BatchesResult';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { marker } from '@biesbjerg/ngx-translate-extract-marker';\r\nimport { ConfirmationDialogMethod, QuestionData } from '@src/app/components/app-dialog-confirmation/app-dialog-confirmation.component';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport * as fileSaver from 'file-saver';\r\nimport { BatchExecState } from '@src/app/enums/BatchExecState';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { BatchData } from '@src/app/services/batch/BatchData';\r\nimport { BatchSelector } from '@src/app/services/batch/BatchSelector';\r\nimport { BatchService } from '@src/app/services/batch/batch.service';\r\n\r\n\r\n\r\n\r\n\r\n@Component({\r\n    selector: 'company-batch-list',\r\n    templateUrl: './company-batch-list.component.html',\r\n    styleUrls: ['./company-batch-list.component.scss']\r\n})\r\nexport class CompanyBatchListComponent extends UIStateComponent implements OnInit {\r\n    companyUniqueId: string;\r\n    batchesResult: BatchesResult;\r\n    batches: BatchData.BatchExecInfo[];\r\n    dataSource: MatTableDataSource<BatchData.BatchExecInfo> = new MatTableDataSource([]);\r\n    selection: SelectionModel<BatchData.BatchExecInfo> = new SelectionModel<BatchData.BatchExecInfo>(true, []);\r\n\r\n    downloadSelector: BatchSelector = new BatchSelector();\r\n\r\n    constructor(\r\n        readonly authenticationService: AuthenticationService,\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        readonly dialog: MatDialog,\r\n        readonly translate: TranslateService,\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    checkAndToggleRowSeletion(batch: BatchData.BatchExecInfo): void {\r\n        if (\r\n            this.isFinished(batch) &&\r\n            !this.isExecContextDeleted(batch)\r\n        ) {\r\n            this.downloadSelector.toggle(batch);\r\n        }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.updateTable('0');\r\n    }\r\n\r\n    isAllSelected(): boolean {\r\n        return this.selection.selected.length === this.dataSource.data.filter(b => b.batch.deleted).length;\r\n    }\r\n\r\n    masterToggle(): void {\r\n        this.isAllSelected() ?\r\n            this.selection.clear() :\r\n            this.dataSource.data.filter(b => b.batch.deleted).forEach(row => this.selection.select(row));\r\n    }\r\n\r\n    get columnsToDisplay(): string[] {\r\n        if (this.isRole.MasterOperator) {\r\n            return [\r\n                'check',\r\n                'id',\r\n                'createdOn',\r\n                'isBatchConsistent',\r\n                'isDeleted',\r\n                'sourceCode',\r\n                'execState',\r\n                'bts'\r\n            ];\r\n        } else {\r\n            return ['id',\r\n                'createdOn',\r\n                'isBatchConsistent',\r\n                'isDeleted',\r\n                'sourceCode',\r\n                'execState',\r\n                'bts'\r\n            ];\r\n        }\r\n    }\r\n\r\n    updateTable(pageNumber: string): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .batches(pageNumber, this.companyUniqueId)\r\n            .subscribe({\r\n                next: (batchesResult) => {\r\n                    this.batchesResult = batchesResult;\r\n                    this.batches = this.batchesResult.batches.content;\r\n                    this.dataSource = new MatTableDataSource(this.batches);\r\n                    this.selection.clear();\r\n                },\r\n                complete: () => this.isLoading = false,\r\n            });\r\n    }\r\n\r\n    isFinished(b: BatchData.BatchExecInfo): boolean {\r\n        if (b.batch.execState === BatchExecState.Finished ||\r\n            b.batch.execState === BatchExecState.Error ||\r\n            b.batch.execState === BatchExecState.Archived) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isExecContextDeleted(b: BatchData.BatchExecInfo): boolean {\r\n        return b.execContextDeleted;\r\n    }\r\n\r\n    prevPage(): void {\r\n        this.updateTable((this.batchesResult.batches.number - 1).toString());\r\n    }\r\n\r\n    nextPage(): void {\r\n        this.updateTable((this.batchesResult.batches.number + 1).toString());\r\n    }\r\n\r\n    @ConfirmationDialogMethod({\r\n        question: (batch: BatchData.BatchExecInfo): QuestionData => {\r\n            return {\r\n                text: marker('batch-company.delete-dialog.Do you want to delete Batch _batchId_'),\r\n                params: { batchId: batch.batch.id }\r\n            };\r\n        },\r\n        rejectTitle: `${marker('batch-company.delete-dialog.Cancel')}`,\r\n        resolveTitle: `${marker('batch-company.delete-dialog.Delete')}`,\r\n    })\r\n\r\n    deleteOne(batch: BatchData.BatchExecInfo): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .processBatchDeleteCommit(this.companyUniqueId, batch.batch.id.toString())\r\n            .subscribe({\r\n                complete: () => {\r\n                    this.updateTable(this.batchesResult.batches.number.toString());\r\n                }\r\n            });\r\n    }\r\n\r\n    @ConfirmationDialogMethod({\r\n        question: (): QuestionData => {\r\n            return {\r\n                text: marker('batch-company.delete-dialog.Do you want to delete Batches'),\r\n                params: {}\r\n            };\r\n        },\r\n        rejectTitle: `${marker('batch-company.delete-dialog.Cancel')}`,\r\n        resolveTitle: `${marker('batch-company.delete-dialog.Delete')}`,\r\n    })\r\n    deleteMany(): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .processBatchesBulkDeleteCommit(\r\n                this.companyUniqueId,\r\n                this.selection.selected\r\n                    .map(b => b.batch.id).toString()\r\n            )\r\n            .subscribe({\r\n                next: () => {\r\n                    this.updateTable(this.batchesResult.batches.number.toString());\r\n                }\r\n            });\r\n    }\r\n\r\n    downloadResult(el: BatchData.BatchExecInfo): void {\r\n        this.companyService\r\n            .downloadProcessingResult(this.companyUniqueId, el.batch.id.toString())\r\n            .subscribe((res) => {\r\n                const name: string = res.headers\r\n                    .get('Content-Disposition')\r\n                    .replace('filename*=UTF-8\\'\\'', '') || 'result.zip';\r\n                fileSaver.saveAs(res.body, name);\r\n            });\r\n    }\r\n    downloadOriginFile(el: BatchData.BatchExecInfo): void {\r\n        this.companyService\r\n            .downloadOriginFile(\r\n                this.companyUniqueId,\r\n                el.batch.id.toString(),\r\n                el.uploadedFileName\r\n            )\r\n            .subscribe((res) => {\r\n                const name: string = res.headers\r\n                    .get('Content-Disposition')\r\n                    .replace('filename*=UTF-8\\'\\'', '') || 'result.zip';\r\n                fileSaver.saveAs(res.body, name);\r\n            });\r\n    }\r\n\r\n    downloadResults(): void {\r\n        this.isLoading = true;\r\n        this.companyService.downloadProcessingResults(\r\n            this.downloadSelector.getList(),\r\n            this.companyUniqueId\r\n        ).subscribe(() => {\r\n            this.isLoading = false;\r\n            this.downloadSelector.clear();\r\n        });\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { AccountWithRoleResult } from '@src/app/services/company/AccountWithRoleResult';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\n\r\n@Component({\r\n    selector: 'account-edit-roles',\r\n    templateUrl: './account-edit-roles.component.html',\r\n    styleUrls: ['./account-edit-roles.component.sass']\r\n})\r\nexport class AccountEditRolesComponent implements OnInit {\r\n\r\n    accountId: string;\r\n    companyUniqueId: string;\r\n    accountWithRoleResult: AccountWithRoleResult;\r\n    operationStatusRest: OperationStatusRest;\r\n    roleModel: Map<string, boolean> = new Map();\r\n\r\n    isLoading: boolean;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        this.accountId = this.activatedRoute.snapshot.paramMap.get('accountId');\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.companyService\r\n            .editRoles(this.accountId, this.companyUniqueId)\r\n            .subscribe(accountWithRoleResult => {\r\n                this.accountWithRoleResult = accountWithRoleResult;\r\n                this.accountWithRoleResult.possibleRoles.forEach(r => this.roleModel.set(r, false));\r\n                this.accountWithRoleResult.account.authorities.forEach(a => {\r\n                    if (this.roleModel.has(a.authority)) {\r\n                        this.roleModel.set(a.authority, true);\r\n                    }\r\n                });\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n\r\n    save(role: { key: string, value: boolean }): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .rolesEditFormCommit(this.accountId, role.key, role.value, this.companyUniqueId)\r\n            .subscribe((operationStatusRest: OperationStatusRest) => {\r\n                this.operationStatusRest = operationStatusRest;\r\n                this.isLoading = false;\r\n            });\r\n    }\r\n}\r\n","<ct-cols *ngIf=\"accountWithRoleResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>\r\n                        Edit Account #{{accountId}} Roles\r\n                    </ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <div *ngFor=\"let el of roleModel | keyvalue\" style=\"margin: 0.5em 0\">\r\n                        <mat-checkbox [(ngModel)]=\"el.value\" (change)=\"save(el)\" [disabled]=\"isLoading\">{{ el.key}}\r\n                        </mat-checkbox>\r\n                    </div>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\n\r\n@Component({\r\n    selector: 'company-add',\r\n    templateUrl: './company-add.component.html',\r\n    styleUrls: ['./company-add.component.sass']\r\n})\r\nexport class CompanyAddComponent {\r\n    operationStatusRest: OperationStatusRest;\r\n\r\n    form: FormGroup = new FormGroup({\r\n        name: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(1)\r\n        ]),\r\n    });\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute\r\n    ) { }\r\n\r\n    createCompany(): void {\r\n        this.companyService\r\n            .addFormCommitCompany(this.form.value.name)\r\n            .subscribe((operationStatusRest) => {\r\n                if (operationStatusRest.status === OperationStatus.OK) {\r\n                    this.back();\r\n                } else {\r\n                    this.operationStatusRest = operationStatusRest;\r\n                }\r\n            });\r\n    }\r\n    back(): void {\r\n        this.router.navigate(['../', 'companies'], { relativeTo: this.activatedRoute });\r\n    }\r\n}\r\n","<ct-cols>\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>New Company</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body [formGroup]=\"form\">\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                        <mat-label>Name of company</mat-label>\r\n                        <input matInput=\"matInput\" formControlName=\"name\" />\r\n                        <mat-hint>This is a required field.</mat-hint>\r\n                    </mat-form-field>\r\n                    <br>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"unit(1)\">\r\n                        <ct-flex-item>\r\n                            <a mat-stroked-button [routerLink]=\"['../companies']\">Cancel</a>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button color=\"primary\" (click)=\"createCompany()\"\r\n                                [disabled]=\"form.invalid\">Create\r\n                                Company</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { SimpleCompaniesResult } from '@src/app/services/company/SimpleCompaniesResult';\r\nimport { SimpleCompany } from '@src/app/services/company/SimpleCompany';\r\nimport { DispatcherAssetModeService } from '@src/app/services/dispatcher-asset-mode/dispatcher-asset-mode.service';\r\n\r\n@Component({\r\n    selector: 'companies',\r\n    templateUrl: './companies.component.html',\r\n    styleUrls: ['./companies.component.sass']\r\n})\r\nexport class CompaniesComponent extends UIStateComponent implements OnInit {\r\n    columnsToDisplay: string[] = ['uniqueId', 'name', 'bts'];\r\n    simpleCompaniesResult: SimpleCompaniesResult;\r\n    dataSource: MatTableDataSource<SimpleCompany> = new MatTableDataSource([]);\r\n\r\n    constructor(\r\n        readonly authenticationService: AuthenticationService,\r\n        private companyService: CompanyService,\r\n        public dispatcherAssetModeService: DispatcherAssetModeService\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.updateTable(0);\r\n    }\r\n\r\n    updateTable(pageNumber: number): void {\r\n        this.setIsLoadingStart();\r\n        this.companyService\r\n            .companies(pageNumber.toString())\r\n            .subscribe({\r\n                next: simpleCompaniesResult => {\r\n                    this.simpleCompaniesResult = simpleCompaniesResult;\r\n                    this.dataSource = new MatTableDataSource(this.simpleCompaniesResult.companies.content);\r\n                },\r\n                complete: () => {\r\n                    this.setIsLoadingEnd();\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    prevPage(): void {\r\n        this.updateTable((this.simpleCompaniesResult.companies.number - 1));\r\n    }\r\n\r\n    nextPage(): void {\r\n        this.updateTable((this.simpleCompaniesResult.companies.number + 1));\r\n    }\r\n}\r\n","<ct-section *ngIf=\"simpleCompaniesResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-heading>Companies</ct-heading>\r\n                </ct-flex-item>\r\n                <ct-flex-item *ngIf=\"!dispatcherAssetModeService.isReplicated(simpleCompaniesResult.assetMode)\">\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-header-row>\r\n        <ct-section-header-row *ngIf=\"dispatcherAssetModeService.isReplicated(simpleCompaniesResult.assetMode)\">\r\n            <ct-alert theme=\"info\">\r\n                Management of companies are disabled, assetMode is 'replicated'.\r\n            </ct-alert>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ng-container *ngTemplateOutlet=\"mainTableTemplate\"></ng-container>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n    <ct-section-footer>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-table-pagination (prev)=\"prevPage()\" (next)=\"nextPage()\"\r\n                        [pageableDefault]=\"simpleCompaniesResult.companies\"></ct-table-pagination>\r\n                </ct-flex-item>\r\n                <ct-flex-item *ngIf=\"!dispatcherAssetModeService.isReplicated(simpleCompaniesResult.assetMode)\">\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>\r\n\r\n\r\n\r\n<ng-template #mainTableTemplate>\r\n    <ct-table [isWaiting]=\"isLoading\">\r\n        <table class=\"mat-table\" mat-table=\"mat-table\" [dataSource]=\"dataSource\">\r\n            <ng-container matColumnDef=\"uniqueId\">\r\n                <th mat-header-cell *matHeaderCellDef>Id</th>\r\n                <td mat-cell=\"mat-cell\" *matCellDef=\"let el\">{{el.uniqueId}} </td>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef>Name</th>\r\n                <td mat-cell=\"mat-cell\" *matCellDef=\"let el\">{{el.name}} </td>\r\n            </ng-container>\r\n            <ng-container matColumnDef=\"bts\">\r\n                <th mat-header-cell *matHeaderCellDef> </th>\r\n                <td mat-cell=\"mat-cell\" *matCellDef=\"let el\">\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"9px\">\r\n                        <ng-container *ngIf=\"authenticationService.isRoleMasterAdmin()\">\r\n                            <ng-container\r\n                                *ngIf=\"!dispatcherAssetModeService.isReplicated(simpleCompaniesResult.assetMode)\">\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button color=\"primary\" size=\"forTableRow\"\r\n                                        [routerLink]=\"['../',el.uniqueId,'edit']\">Edit</a>\r\n                                </ct-flex-item>\r\n                            </ng-container>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"authenticationService.isRoleMasterAdmin()\">\r\n                            <ct-flex-item>\r\n                                <a mat-flat-button color=\"primary\" size=\"forTableRow\"\r\n                                    [routerLink]=\"['../',el.uniqueId,'accounts']\">Accounts</a>\r\n                            </ct-flex-item>\r\n                        </ng-container>\r\n\r\n                        <ng-container\r\n                            *ngIf=\"authenticationService.isRoleMasterOperator() || authenticationService.isRoleMasterSupport()\">\r\n                            <ng-container *ngIf=\"el.id !== 1\">\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button color=\"primary\" size=\"forTableRow\"\r\n                                        [routerLink]=\"['../',el.uniqueId,'batches']\">Batches</a>\r\n                                </ct-flex-item>\r\n                            </ng-container>\r\n                        </ng-container>\r\n                    </ct-flex>\r\n                </td>\r\n            </ng-container>\r\n            <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\"></tr>\r\n        </table>\r\n    </ct-table>\r\n</ng-template>\r\n\r\n\r\n\r\n<ng-template #addButtonTemplate>\r\n    <button mat-flat-button color=\"primary\" routerLink=\"../add\"> Add New Company </button>\r\n</ng-template>","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BatchData } from '@src/app/services/batch/BatchData';\r\nimport { BatchService } from '@src/app/services/batch/batch.service';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { SourceCode } from '@src/app/services/source-codes/SourceCode';\r\nimport { SourceCodesForCompany } from '@src/app/services/source-codes/SourceCodesForCompany';\r\nimport { SourceCodeUidsForCompany } from '@src/app/services/source-codes/SourceCodeUidsForCompany';\r\nimport { CtFileUploadComponent } from '../../ct/ct-file-upload/ct-file-upload.component';\r\n\r\n@Component({\r\n    selector: 'company-batch-upload',\r\n    templateUrl: './company-batch-upload.component.html',\r\n    styleUrls: ['./company-batch-upload.component.sass']\r\n})\r\nexport class CompanyBatchUploadComponent implements OnInit {\r\n    @ViewChild('fileUpload') fileUpload: CtFileUploadComponent;\r\n\r\n    batchId: string;\r\n    companyUniqueId: string;\r\n    sourceCodesForCompany: SourceCodesForCompany;\r\n    sourceCode: SourceCode;\r\n    file: File;\r\n    batchDataUploadingStatus: BatchData.UploadingStatus;\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.batchId = this.activatedRoute.snapshot.paramMap.get('batchId');\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n\r\n        this.companyService\r\n            .sourceCodesForCompany(this.companyUniqueId)\r\n            .subscribe(sourceCodesForCompany => {\r\n                this.sourceCodesForCompany = sourceCodesForCompany;\r\n            });\r\n    }\r\n\r\n    fileUploadChanged(): void {\r\n        this.file = this.fileUpload.fileInput.nativeElement.files[0] || false;\r\n    }\r\n\r\n    upload(): void {\r\n        this.companyService\r\n            .uploadFile(this.companyUniqueId, this.sourceCode.id.toString(), this.file)\r\n            .subscribe(batchDataUploadingStatus => {\r\n                this.batchDataUploadingStatus = batchDataUploadingStatus;\r\n            });\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../'], { relativeTo: this.activatedRoute });\r\n    }\r\n}\r\n\r\n","<ct-cols *ngIf=\"sourceCodesForCompany\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>{{ 'batch-add.Upload file for processing' | translate }}</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\" style=\"width:100%\">\r\n                        <mat-label> {{ 'batch-add.List of Source Codes' | translate }}</mat-label>\r\n                        <mat-select [(ngModel)]=\"sourceCode\">\r\n                            <div *ngFor=\"let sourceCode of sourceCodesForCompany.items\">\r\n                                <mat-option [value]=\"sourceCode\">{{sourceCode.uid}}</mat-option>\r\n                            </div>\r\n                        </mat-select>\r\n                        <mat-hint>{{ 'batch-add.This is a required field.' | translate }}</mat-hint>\r\n                    </mat-form-field>\r\n\r\n                    <br>\r\n                    <br>\r\n\r\n                    <div>\r\n                        <ct-file-upload #fileUpload acceptTypes=\".zip, .xml\"\r\n                            buttonTitle=\"{{'batch-add.Select File' | translate}}\" (changed)=\"fileUploadChanged()\">\r\n                        </ct-file-upload>\r\n                        <ct-hint>{{ 'batch-add.This is a required field.' | translate }}</ct-hint>\r\n                        <ct-hint>{{ 'batch-add.Only .xml and .zip files are supported' | translate }}</ct-hint>\r\n                    </div>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\">\r\n                                {{ 'batch-add.Cancel' | translate }}</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" color=\"primary\" [disabled]=\"!sourceCode || !file\"\r\n                                (click)=\"upload()\"> {{ 'batch-add.Upload-File-button' | translate }}</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"batchDataUploadingStatus\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { generateFormData } from '@src/app/helpers/generateFormData';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { environment } from '@src/environments/environment';\r\nimport { from, Observable, of, Subscription } from 'rxjs';\r\nimport { SimpleCompaniesResult } from './SimpleCompaniesResult';\r\nimport { SimpleCompanyResult } from './SimpleCompanyResult';\r\nimport { NewAccount, AccountsResult, AccountResult } from '../accounts';\r\nimport { AccountWithRoleResult } from './AccountWithRoleResult';\r\nimport { BatchesResult } from '../batch/BatchesResult';\r\nimport { BatchData } from '@src/app/services/batch/BatchData';\r\nimport { SourceCodesForCompany } from '../source-codes/SourceCodesForCompany';\r\nimport * as JSZip from 'jszip';\r\nimport { catchError, concatMap } from 'rxjs/operators';\r\nimport * as fileSaver from 'file-saver';\r\n\r\nconst url = (s: string): string => `${environment.baseUrl}dispatcher/company/${s}`;\r\n\r\ninterface ProcessableItem {\r\n    id: string;\r\n    companyId: string;\r\n    response: HttpResponse<Blob>;\r\n    fileName: string;\r\n}\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CompanyService {\r\n    constructor(\r\n        private http: HttpClient\r\n    ) { }\r\n\r\n    companies = (page: string): Observable<SimpleCompaniesResult> =>\r\n        this.http.get<SimpleCompaniesResult>(url('companies'), { params: { page } })\r\n\r\n    addFormCommitCompany = (companyName: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url('company-add-commit'),\r\n            generateFormData({\r\n                companyName\r\n            }))\r\n\r\n    editCompany = (companyUniqueId: string): Observable<SimpleCompanyResult> =>\r\n        this.http.get<SimpleCompanyResult>(url(`company-edit/${companyUniqueId}`))\r\n\r\n    editFormCommitCompany = (companyUniqueId: string, name: string, groups: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-edit-commit`),\r\n            generateFormData({\r\n                companyUniqueId,\r\n                name,\r\n                groups\r\n            }))\r\n\r\n    accounts = (page: string, companyUniqueId: string): Observable<AccountsResult> =>\r\n        this.http.get<AccountsResult>(url(`company-accounts/${companyUniqueId}`), { params: { page } })\r\n\r\n    addFormCommitNewAccount = (account: NewAccount, companyUniqueId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-account-add-commit/${companyUniqueId}`), account)\r\n\r\n    edit = (companyUniqueId: string, id: string): Observable<AccountResult> =>\r\n        this.http.get<AccountResult>(url(`company-account-edit/${companyUniqueId}/${id}`))\r\n\r\n\r\n\r\n    // @PostMapping(\"/company-account-edit-commit/{companyUniqueId}\")\r\n    // @PreAuthorize(\"hasAnyRole('MASTER_ADMIN')\")\r\n    // public OperationStatusRest editFormCommit(Long id, String publicName, boolean enabled, @PathVariable Long companyUniqueId) {\r\n    //     OperationStatusRest operationStatusRest = companyAccountTopLevelService.editFormCommit(id, publicName, enabled, companyUniqueId);\r\n    //     return operationStatusRest;\r\n    // }\r\n\r\n    editFormCommit = (id: string, publicName: string, enabled: boolean, companyUniqueId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-account-edit-commit/${companyUniqueId}`),\r\n            generateFormData({\r\n                id, publicName, enabled, companyUniqueId\r\n            }))\r\n\r\n    passwordEdit = (accountId: string, companyUniqueId: string): Observable<AccountResult> =>\r\n        this.http.get<AccountResult>(url(`company-account-password-edit/${companyUniqueId}/${accountId}`))\r\n\r\n    passwordEditFormCommit = (id: string, password: string, password2: string, companyUniqueId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-account-password-edit-commit/${companyUniqueId}`),\r\n            generateFormData({\r\n                id, password, password2, companyUniqueId\r\n            }))\r\n\r\n    editRoles = (accountId: string, companyUniqueId: string): Observable<AccountWithRoleResult> =>\r\n        this.http.get<AccountWithRoleResult>(url(`company-account-edit-roles/${companyUniqueId}/${accountId}`))\r\n\r\n    rolesEditFormCommit = (accountId: string, role: string, checkbox: boolean, companyId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`company-account-edit-roles-commit/${companyId}`),\r\n            generateFormData({\r\n                accountId, role, checkbox, companyId\r\n            }))\r\n\r\n    //\r\n    //\r\n    //\r\n    //\r\n\r\n    batches = (page: string, companyUniqueId: string): Observable<BatchesResult> =>\r\n        this.http.get<BatchesResult>(url(`batch/company-batches/${companyUniqueId}`), { params: { page } })\r\n\r\n    processBatchDelete = (companyUniqueId: string, batchId: string): Observable<BatchData.Status> =>\r\n        this.http.get<BatchData.Status>(url(`batch/company-batch-delete/${companyUniqueId}/${batchId}`))\r\n\r\n    processBatchDeleteCommit = (companyUniqueId: string, batchId: string): Observable<OperationStatusRest> =>\r\n        this.http.post<OperationStatusRest>(\r\n            url(`batch/company-batch-delete-commit/${companyUniqueId}`),\r\n            generateFormData({ batchId })\r\n        )\r\n\r\n    processBatchesBulkDeleteCommit = (companyUniqueId: string, batchIds: string): Observable<BatchData.BulkOperations> =>\r\n        this.http.post<BatchData.BulkOperations>(\r\n            url(`batch/company-batch-bulk-delete-commit/${companyUniqueId}`),\r\n            generateFormData({ batchIds })\r\n        )\r\n\r\n    uploadFile = (companyUniqueId: string, sourceCodeId: string, file: File): Observable<BatchData.UploadingStatus> =>\r\n        this.http.post<BatchData.UploadingStatus>(\r\n            url(`batch/company-batch-upload-from-file/${companyUniqueId}`),\r\n            generateFormData({\r\n                sourceCodeId,\r\n                file\r\n            })\r\n        )\r\n\r\n    getBatchStatus = (companyUniqueId: string, batchId: string): Observable<BatchData.Status> =>\r\n        this.http.get<BatchData.Status>(url(`batch/company-batch-status/${companyUniqueId}/${batchId}`))\r\n\r\n    downloadProcessingResult = (companyUniqueId: string, batchId: string): Observable<HttpResponse<Blob>> => {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/octet-stream');\r\n        return this.http.get(url(`batch/company-batch-download-result/${companyUniqueId}/${batchId}`), {\r\n            headers,\r\n            observe: 'response',\r\n            responseType: 'blob'\r\n        });\r\n    }\r\n\r\n    downloadOriginFile = (companyUniqueId: string, batchId: string, fileName: string): Observable<HttpResponse<Blob>> => {\r\n        let headers: HttpHeaders = new HttpHeaders();\r\n        headers = headers.append('Accept', 'application/octet-stream');\r\n        return this.http.get(url(`batch/company-batch-download-origin-file/${companyUniqueId}/${batchId}/${fileName}`), {\r\n            headers,\r\n            observe: 'response',\r\n            responseType: 'blob'\r\n        });\r\n    }\r\n\r\n    sourceCodesForCompany = (companyUniqueId: string): Observable<SourceCodesForCompany> =>\r\n        this.http.get<SourceCodesForCompany>(\r\n            url(`batch/company-batch-source-codes/${companyUniqueId}`)\r\n        )\r\n\r\n    downloadProcessingResults(list: number[], companyId: string): Observable<boolean> {\r\n        const zipFileName: string = 'result ' + list.toString() + '.zip';\r\n        const zip: JSZip = new JSZip();\r\n        const processable: ProcessableItem[] = list.map(el => ({\r\n            id: el.toString(),\r\n            fileName: 'empty',\r\n            response: null,\r\n            companyId\r\n        }));\r\n        return new Observable<boolean>(sub => {\r\n            from(processable)\r\n                .pipe(\r\n                    concatMap(item => this.downloadProcessingResult(item.companyId, item.id)\r\n                        .pipe(\r\n                            catchError(err => of(err)),\r\n                            this.parseProcessableItemOperator(item),\r\n                        )\r\n                    )\r\n                )\r\n                .subscribe({\r\n                    next: e => { },\r\n                    error: error => sub.error(error),\r\n                    complete: () => {\r\n                        processable.forEach(item => {\r\n                            zip.file(item.fileName, item.response.body);\r\n                        });\r\n                        zip.generateAsync({ type: 'blob' }).then((blob: Blob) => {\r\n                            fileSaver.saveAs(blob, zipFileName);\r\n                        });\r\n                        sub.next(true);\r\n                        sub.complete();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    private parseProcessableItemOperator(item: ProcessableItem): (source: Observable<HttpResponse<Blob>>) => Observable<Subscription> {\r\n        return (source: Observable<HttpResponse<Blob>>) =>\r\n            new Observable<Subscription>(observer => {\r\n                return source.subscribe(\r\n                    {\r\n                        next: response => {\r\n                            item.response = response;\r\n                            item.fileName = response.ok ?\r\n                                `${item.id}.zip` :\r\n                                `${item.id} error`;\r\n                            observer.next();\r\n                        },\r\n                        error: error => observer.error(error),\r\n                        complete: () => observer.complete(),\r\n                    }\r\n                );\r\n            });\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { SimpleCompanyResult } from '@src/app/services/company/SimpleCompanyResult';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\n\r\n@Component({\r\n    selector: 'company-edit',\r\n    templateUrl: './company-edit.component.html',\r\n    styleUrls: ['./company-edit.component.sass']\r\n})\r\nexport class CompanyEditComponent implements OnInit {\r\n\r\n    companyUniqueId: string;\r\n    name: string;\r\n    groups: string;\r\n    operationStatusRest: OperationStatusRest;\r\n    simpleCompanyResult: SimpleCompanyResult;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.companyService\r\n            .editCompany(this.companyUniqueId)\r\n            .subscribe(simpleCompanyResult => {\r\n                this.simpleCompanyResult = simpleCompanyResult;\r\n                this.name = simpleCompanyResult.company.name;\r\n                this.groups = simpleCompanyResult.companyAccessControl.groups;\r\n            });\r\n    }\r\n\r\n    saveChanges(): void {\r\n        this.companyService\r\n            .editFormCommitCompany(this.companyUniqueId, this.name, this.groups)\r\n            .subscribe(operationStatusRest => {\r\n                if (operationStatusRest.status === OperationStatus.OK) {\r\n                    this.back();\r\n                } else {\r\n                    this.operationStatusRest = operationStatusRest;\r\n                }\r\n            });\r\n    }\r\n    back(): void {\r\n        this.router.navigate(['../../companies'], { relativeTo: this.activatedRoute });\r\n    }\r\n}\r\n","<ct-cols *ngIf=\"simpleCompanyResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>Edit Company</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                        <mat-label>Name of company</mat-label>\r\n                        <input matInput=\"matInput\" [(ngModel)]=\"name\" />\r\n                        <mat-hint>This is a required field.</mat-hint>\r\n                    </mat-form-field>\r\n                    <br>\r\n                    <br>\r\n                    <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                        <mat-label>Company's groups</mat-label>\r\n                        <input matInput=\"matInput\" [(ngModel)]=\"groups\" />\r\n                    </mat-form-field>\r\n                    <br>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"unit(1)\">\r\n                        <ct-flex-item>\r\n                            <a mat-stroked-button [routerLink]=\"['../../companies']\">Cancel</a>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button color=\"primary\" (click)=\"saveChanges()\">Save Changes</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { DispatcherAssetMode } from '@src/app/enums/DispatcherAssetMode';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AccountsResult } from '@src/app/services/accounts/AccountsResult';\r\nimport { SimpleAccount } from '@src/app/services/accounts/SimpleAccount';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { DispatcherAssetModeService } from '@src/app/services/dispatcher-asset-mode/dispatcher-asset-mode.service';\r\n\r\n@Component({\r\n    selector: 'accounts',\r\n    templateUrl: './accounts.component.html',\r\n    styleUrls: ['./accounts.component.sass']\r\n})\r\nexport class AccountsComponent extends UIStateComponent implements OnInit {\r\n    dataSource: MatTableDataSource<SimpleAccount> = new MatTableDataSource<SimpleAccount>([]);\r\n    columnsToDisplay: string[] = ['id', 'isEnabled', 'login', 'publicName', 'role', 'createdOn', 'bts'];\r\n    accountsResult: AccountsResult;\r\n    companyUniqueId: string;\r\n\r\n    constructor(\r\n        private companyService: CompanyService,\r\n        private activatedRoute: ActivatedRoute,\r\n        public dispatcherAssetModeService: DispatcherAssetModeService,\r\n        readonly authenticationService: AuthenticationService\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.updateTable(0);\r\n    }\r\n\r\n    updateTable(page: number): void {\r\n        this.setIsLoadingStart();\r\n        this.companyService\r\n            .accounts(page.toString(), this.companyUniqueId)\r\n            .subscribe({\r\n                next: accountsResult => {\r\n                    this.accountsResult = accountsResult;\r\n                    this.dataSource = new MatTableDataSource(this.accountsResult.accounts.content || []);\r\n                },\r\n                complete: () => {\r\n                    this.setIsLoadingEnd();\r\n                }\r\n            });\r\n    }\r\n\r\n    nextPage(): void {\r\n        this.updateTable(this.accountsResult.accounts.number + 1);\r\n    }\r\n\r\n    prevPage(): void {\r\n        this.updateTable(this.accountsResult.accounts.number - 1);\r\n    }\r\n}\r\n","<ct-section *ngIf=\"accountsResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-heading>Accounts</ct-heading>\r\n                </ct-flex-item>\r\n                <ct-flex-item *ngIf=\"!dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-header-row>\r\n        <ct-section-header-row *ngIf=\"dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n            <ct-alert theme=\"info\">\r\n                Management of accounts are disabled, assetMode is 'replicated'.\r\n            </ct-alert>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-table [isWaiting]=\"isLoading\">\r\n                <table mat-table [dataSource]=\"dataSource\">\r\n                    <ng-container matColumnDef=\"id\">\r\n                        <th mat-header-cell *matHeaderCellDef>ID </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.id}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"isEnabled\">\r\n                        <th mat-header-cell *matHeaderCellDef>Is enabled </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.enabled ? 'Yes':'No'}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"login\">\r\n                        <th mat-header-cell *matHeaderCellDef>Login </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.username}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"publicName\">\r\n                        <th mat-header-cell *matHeaderCellDef>Public name </th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.publicName}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"role\">\r\n                        <th mat-header-cell *matHeaderCellDef>Roles</th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.roles}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"createdOn\">\r\n                        <th mat-header-cell *matHeaderCellDef>Created On </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            {{el.createdOn | date:'HH:mm:ss, MMM&nbsp;d,&nbsp;yyyy'}} </td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"bts\">\r\n                        <th mat-header-cell *matHeaderCellDef> </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ct-flex justify-content=\"flex-end\" gap=\"9px\"\r\n                                *ngIf=\"!dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button size=\"forTableRow\" [routerLink]=\"['../','account',el.id,'edit']\"\r\n                                        color=\"primary\"> Edit</a>\r\n                                </ct-flex-item>\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button size=\"forTableRow\"\r\n                                        [routerLink]=\"['../','account',el.id,'edit-roles']\" color=\"primary\">Roles</a>\r\n                                </ct-flex-item>\r\n                                <ct-flex-item>\r\n                                    <a mat-flat-button size=\"forTableRow\"\r\n                                        [routerLink]=\"['../','account',el.id,'edit-password']\" color=\"primary\">\r\n                                        Change Password</a>\r\n                                </ct-flex-item>\r\n                            </ct-flex>\r\n                        </td>\r\n                    </ng-container>\r\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"> </tr>\r\n                    <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay;\"> </tr>\r\n                </table>\r\n            </ct-table>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n    <ct-section-footer>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-flex justify-content=\"flex-start\" gap=\"8px\">\r\n                        <ct-table-pagination (prev)=\"prevPage()\" (next)=\"nextPage()\"\r\n                            [pageableDefault]=\"accountsResult.accounts\"></ct-table-pagination>\r\n                    </ct-flex>\r\n                </ct-flex-item>\r\n                <ct-flex-item *ngIf=\"!dispatcherAssetModeService.isReplicated(accountsResult.assetMode)\">\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>\r\n\r\n\r\n<ng-template #addButtonTemplate>\r\n    <button mat-flat-button color=\"primary\" [routerLink]=\"['../','account','add']\">\r\n        Add New Account\r\n    </button>\r\n</ng-template>","import { Component, OnInit } from '@angular/core';\r\nimport { CompanyService } from '@src/app/services/company/company.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormGroup, FormControl, Validators, ValidationErrors } from '@angular/forms';\r\nimport { AccountResult } from '@src/app/services/accounts/AccountResult';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\n\r\n@Component({\r\n    selector: 'account-edit-password',\r\n    templateUrl: './account-edit-password.component.html',\r\n    styleUrls: ['./account-edit-password.component.sass']\r\n})\r\nexport class AccountEditPasswordComponent implements OnInit {\r\n    accountResult: AccountResult;\r\n    accoundId: string;\r\n    companyUniqueId: string;\r\n    operationStatusRest: OperationStatusRest;\r\n\r\n    form = new FormGroup({\r\n        password: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3)\r\n        ]),\r\n        password2: new FormControl('', [\r\n            Validators.required,\r\n            Validators.minLength(3),\r\n            (control: FormControl): ValidationErrors | null => {\r\n                const group: FormGroup = this.form;\r\n                if (group) {\r\n                    return (group.value.password === control.value) ? null : {\r\n                        notSame: true\r\n                    };\r\n                }\r\n                return null;\r\n            }\r\n        ]),\r\n    });\r\n\r\n    isLoading: boolean;\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute,\r\n        private companyService: CompanyService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isLoading = true;\r\n        this.accoundId = this.activatedRoute.snapshot.paramMap.get('accountId');\r\n        this.companyUniqueId = this.activatedRoute.snapshot.paramMap.get('companyUniqueId');\r\n        this.companyService\r\n            .passwordEdit(this.accoundId, this.companyUniqueId)\r\n            .subscribe({\r\n                next: accountResult => this.accountResult = accountResult,\r\n                complete: () => this.isLoading = false\r\n            });\r\n    }\r\n\r\n\r\n    back(): void {\r\n        this.router.navigate(['../../../', 'accounts'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    saveChanges(): void {\r\n        this.isLoading = true;\r\n        this.companyService\r\n            .passwordEditFormCommit(this.accoundId, this.form.value.password, this.form.value.password2, this.companyUniqueId)\r\n            .subscribe({\r\n                next: operationStatusRest => this.operationStatusRest = operationStatusRest,\r\n                complete: () => this.isLoading = false\r\n            });\r\n    }\r\n\r\n}\r\n","<ct-cols align-items=\"baseline\" *ngIf=\"accountResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>Edit Account </ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <form [formGroup]=\"form\" novalidate=\"novalidate\" autocomplete=\"off\">\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Password</mat-label>\r\n                            <input matInput=\"matInput\" type=\"password\" autocomplete=\"new-password\"\r\n                                formControlName=\"password\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\" style=\"width: 100%;\">\r\n                            <mat-label>Password again</mat-label>\r\n                            <input matInput=\"matInput\" type=\"password\" autocomplete=\"new-password\"\r\n                                formControlName=\"password2\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                    </form>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" (click)=\"saveChanges()\" color=\"primary\"\r\n                                [disabled]=\"isLoading\">Save</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { CtModule } from '../ct/ct.module';\r\nimport { MaterialAppModule } from '@src/app/ngmaterial.module';\r\nimport { CompanyComponent } from './company/company.component';\r\nimport { CompaniesComponent } from './companies/companies.component';\r\nimport { CompanyEditComponent } from './company-edit/company-edit.component';\r\nimport { AccountsComponent } from './accounts/accounts.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CompanyAddComponent } from './company-add/company-add.component';\r\nimport { AccountAddComponent } from './account-add/account-add.component';\r\nimport { AccountEditComponent } from './account-edit/account-edit.component';\r\nimport { AccountEditPasswordComponent } from './account-edit-password/account-edit-password.component';\r\nimport { AccountEditRolesComponent } from './account-edit-roles/account-edit-roles.component';\r\nimport { CompanyBatchStatusComponent } from './company-batch-status/company-batch-status.component';\r\nimport { CompanyBatchUploadComponent } from './company-batch-upload/company-batch-upload.component';\r\nimport { CompanyBatchListComponent } from './company-batches/company-batch-list.component';\r\nimport { Role } from '@src/app/services/authentication';\r\nimport { RoleRouteGuard } from '@src/app/guards/role-route.guard';\r\n\r\n\r\nexport const CompanyRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CompanyComponent,\r\n    },\r\n    {\r\n        path: 'companies',\r\n        component: CompaniesComponent\r\n    },\r\n    {\r\n        path: ':companyUniqueId/edit',\r\n        canActivate: [RoleRouteGuard],\r\n        component: CompanyEditComponent,\r\n        data: {\r\n            backConfig: ['../', '../', 'companies'],\r\n            requiredRoles: [Role.MasterAdmin]\r\n        }\r\n    },\r\n    {\r\n        path: 'add',\r\n        component: CompanyAddComponent,\r\n        data: {\r\n            backConfig: ['../', 'companies']\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/accounts',\r\n        component: AccountsComponent,\r\n        canActivate: [RoleRouteGuard],\r\n        data: {\r\n            backConfig: ['../', '../', 'companies'],\r\n            requiredRoles: [Role.MasterAdmin]\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/account/add',\r\n        component: AccountAddComponent,\r\n        data: {\r\n            backConfig: ['../', '../', 'accounts']\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/account/:accountId/edit',\r\n        component: AccountEditComponent,\r\n        data: {\r\n            backConfig: ['../', '../', '../', 'accounts']\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/account/:accountId/edit-roles',\r\n        component: AccountEditRolesComponent,\r\n        data: {\r\n            backConfig: ['../', '../', '../', 'accounts']\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/account/:accountId/edit-password',\r\n        component: AccountEditPasswordComponent,\r\n        data: {\r\n            backConfig: ['../', '../', '../', 'accounts']\r\n        }\r\n    },\r\n    //\r\n    //\r\n    //\r\n    {\r\n        path: '1/batches',\r\n        redirectTo: 'companies'\r\n    },\r\n    {\r\n        path: ':companyUniqueId/batches',\r\n        component: CompanyBatchListComponent,\r\n        canActivate: [RoleRouteGuard],\r\n        data: {\r\n            backConfig: ['../', '../', 'companies'],\r\n            requiredRoles: [Role.MasterSupport, Role.MasterOpertator]\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/batches/upload',\r\n        component: CompanyBatchUploadComponent,\r\n        canActivate: [RoleRouteGuard],\r\n        data: {\r\n            backConfig: ['../'],\r\n            requiredRoles: [Role.MasterSupport, Role.MasterOpertator]\r\n        }\r\n    },\r\n    {\r\n        path: ':companyUniqueId/batch/:batchId',\r\n        component: CompanyBatchStatusComponent,\r\n        canActivate: [RoleRouteGuard],\r\n        data: {\r\n            backConfig: ['../', '../', 'batches'],\r\n            requiredRoles: [Role.MasterSupport, Role.MasterOpertator]\r\n        }\r\n    }\r\n];\r\n\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(CompanyRoutes)],\r\n    exports: [RouterModule],\r\n    declarations: []\r\n})\r\nexport class CompanyRoutingModule { }\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        CompanyRoutingModule,\r\n        CtModule,\r\n        MaterialAppModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        TranslateModule.forChild({})\r\n    ],\r\n    declarations: [\r\n        CompanyComponent,\r\n        CompaniesComponent,\r\n        CompanyEditComponent,\r\n        CompanyAddComponent,\r\n        AccountsComponent,\r\n        AccountAddComponent,\r\n        AccountEditComponent,\r\n        AccountEditPasswordComponent,\r\n        AccountEditRolesComponent,\r\n        CompanyBatchListComponent,\r\n        CompanyBatchStatusComponent,\r\n        CompanyBatchUploadComponent\r\n    ]\r\n})\r\nexport class CompnyModule { }"]}