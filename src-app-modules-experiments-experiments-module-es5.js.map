{"version":3,"sources":["webpack:///src/app/modules/experiments/experiment-state/experiment-state.component.ts","webpack:///src/app/modules/experiments/experiment-state/experiment-state.component.html","webpack:///src/app/services/experiments/experiments.service.ts","webpack:///src/app/modules/experiments/experiments/experiments.component.html","webpack:///src/app/modules/experiments/experiments/experiments.component.ts","webpack:///src/app/modules/experiments/experiments.module.ts","webpack:///src/app/modules/experiments/experiment-edit/experiment-edit.component.ts","webpack:///src/app/modules/experiments/experiment-edit/experiment-edit.component.html","webpack:///src/app/modules/experiments/experiment-add/experiment-add.component.ts","webpack:///src/app/modules/experiments/experiment-add/experiment-add.component.html"],"names":["ExperimentStateComponent","activatedRoute","sourceCodeId","snapshot","paramMap","get","execContextId","url","s","baseUrl","ExperimentsService","http","page","params","id","sourceCodeUid","name","code","description","post","simpleExperiment","experimentId","state","ExperimentsComponent","dialog","experimentsService","authenticationService","ExecContextState","dataSource","columnsToDisplay","updateTable","setIsLoadingStart","getExperiments","toString","subscribe","next","experimentsResult","items","content","complete","setIsLoadingEnd","experiment","deleteCommit","number","element","experimentCloneCommit","execContextTargetExecState","PRODUCED","toLowerCase","STARTED","STOPPED","question","rejectTitle","resolveTitle","ExperimentsRoutes","path","component","data","backConfig","ExperimentsRoutingModule","forChild","ExperimentsModule","ExperimentEditComponent","route","router","edit","experimentsEditResult","editFormCommit","operationStatusRest","navigate","relativeTo","ExperimentAddComponent","form","sourceCodeUID","required","minLength","experimentCode","experimentAdd","sourceCodeUidsForCompany","addFormCommit","value","status","OK","reset","cancel","create"],"mappings":"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","file":"src-app-modules-experiments-experiments-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'experiment-state',\r\n    templateUrl: './experiment-state.component.html',\r\n    styleUrls: ['./experiment-state.component.sass']\r\n})\r\nexport class ExperimentStateComponent implements OnInit {\r\n    sourceCodeId: string;\r\n    execContextId: string;\r\n\r\n    constructor(\r\n        private activatedRoute: ActivatedRoute\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.sourceCodeId = this.activatedRoute.snapshot.paramMap.get('sourceCodeId');\r\n        this.execContextId = this.activatedRoute.snapshot.paramMap.get('execContextId');\r\n    }\r\n}\r\n","<ct-state-of-tasks [sourceCodeId]=\"sourceCodeId\" [execContextId]=\"execContextId\"></ct-state-of-tasks>","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '@src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { generateFormData } from '@src/app/helpers/generateFormData';\r\nimport { ExperimentApiData } from './ExperimentApiData';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { SimpleExperiment } from './SimpleExperiment';\r\nimport { SourceCodeUidsForCompany } from '../source-codes/SourceCodeUidsForCompany';\r\n\r\nconst url = (s: string): string => `${environment.baseUrl}dispatcher/experiment${s}`;\r\n\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ExperimentsService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    // @GetMapping(\"/experiments\")\r\n    // public ExperimentApiData.ExperimentsResult getExperiments(@PageableDefault(size = 5) Pageable pageable) {\r\n    //     return experimentTopLevelService.getExperiments(pageable);\r\n    // }\r\n    getExperiments(page: string): Observable<ExperimentApiData.ExperimentsResult> {\r\n        return this.http.get<ExperimentApiData.ExperimentsResult>(url(`/experiments`), { params: { page } });\r\n    }\r\n\r\n\r\n    // @GetMapping(value = \"/experiment/{id}\")\r\n    // public ExperimentApiData.ExperimentResult getExperiment(@PathVariable Long id) {\r\n    //     return experimentTopLevelService.getExperimentWithoutProcessing(id);\r\n    // }\r\n    getExperiment(id: string): Observable<ExperimentApiData.ExperimentResult> {\r\n        return this.http.get<ExperimentApiData.ExperimentResult>(url(`/experiment/${id}`));\r\n    }\r\n\r\n\r\n    // @GetMapping(value = \"/experiment-add\")\r\n    // public SourceCodeData.SourceCodeUidsForCompany experimentAdd(Authentication authentication) {\r\n    //     DispatcherContext context = userContextService.getContext(authentication);\r\n    //     SourceCodeData.SourceCodeUidsForCompany codes = new SourceCodeData.SourceCodeUidsForCompany();\r\n    //     List<String> uids = dispatcherParamsService.getExperiments();\r\n    //     codes.items = sourceCodeSelectorService.filterSourceCodes(context, uids);\r\n    //     return codes;\r\n    // }\r\n    experimentAdd(): Observable<SourceCodeUidsForCompany> {\r\n        return this.http.get<SourceCodeUidsForCompany>(url(`/experiment-add`));\r\n    }\r\n\r\n\r\n    // @GetMapping(value = \"/experiment-edit/{id}\")\r\n    // public ExperimentApiData.ExperimentsEditResult edit(@PathVariable Long id) {\r\n    //     return experimentTopLevelService.editExperiment(id);\r\n    // }\r\n    edit(id: string): Observable<ExperimentApiData.ExperimentsEditResult> {\r\n        return this.http.get<ExperimentApiData.ExperimentsEditResult>(url(`/experiment-edit/${id}`));\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-add-commit\")\r\n    // public OperationStatusRest addFormCommit(String sourceCodeUid, String name, String code, String description, Authentication authentication) {\r\n    //     DispatcherContext context = userContextService.getContext(authentication);\r\n    //     return experimentTopLevelService.addExperimentCommit(sourceCodeUid, name, code, description, context);\r\n    // }\r\n    addFormCommit(sourceCodeUid: string, name: string, code: string, description: string): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(\r\n            url(`/experiment-add-commit`),\r\n            generateFormData({\r\n                sourceCodeUid, name, code, description\r\n            })\r\n        );\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-edit-commit\")\r\n    // public OperationStatusRest editFormCommit(@RequestBody ExperimentApiData.SimpleExperiment simpleExperiment) {\r\n    //     return experimentTopLevelService.editExperimentCommit(simpleExperiment);\r\n    // }\r\n    editFormCommit(simpleExperiment: SimpleExperiment): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(url(`/experiment-edit-commit`), simpleExperiment);\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-delete-commit\")\r\n    // public OperationStatusRest deleteCommit(Long id) {\r\n    //     return experimentTopLevelService.experimentDeleteCommit(id);\r\n    // }\r\n    deleteCommit(id: string): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(url(`/experiment-delete-commit`), generateFormData({ id }));\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-clone-commit\")\r\n    // public OperationStatusRest experimentCloneCommit(Long id, Authentication authentication) {\r\n    //     DispatcherContext context = userContextService.getContext(authentication);\r\n    //     return experimentTopLevelService.experimentCloneCommit(id, context);\r\n    // }\r\n    experimentCloneCommit(id: string): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(url(`/experiment-clone-commit`), generateFormData({ id }));\r\n    }\r\n\r\n\r\n    // @PostMapping(\"/experiment-target-state/{state}/{experimentId}\")\r\n    // public OperationStatusRest execContextTargetExecState(\r\n    //         @PathVariable Long experimentId, @PathVariable String state, Authentication authentication) {\r\n    //     DispatcherContext context = userContextService.getContext(authentication);\r\n    //     OperationStatusRest operationStatusRest = experimentTopLevelService.changeExecContextState(state, experimentId, context);\r\n    //     return operationStatusRest;\r\n    // }\r\n    execContextTargetExecState(experimentId: string, state: string): Observable<OperationStatusRest> {\r\n        return this.http.post<OperationStatusRest>(url(`/experiment-target-state/${state}/${experimentId}`), {});\r\n    }\r\n\r\n}","<ct-section *ngIf=\"experimentsResult\">\r\n    <ct-section-header>\r\n        <ct-section-header-row>\r\n            <ct-heading>Experiments</ct-heading>\r\n        </ct-section-header-row>\r\n    </ct-section-header>\r\n    <ct-section-body>\r\n        <ct-section-body-row>\r\n            <ct-table [isWaiting]=\"isLoading\">\r\n                <table class=\"mat-table\" mat-table=\"mat-table\" [dataSource]=\"dataSource\">\r\n                    <ng-container matColumnDef=\"id\">\r\n                        <th mat-header-cell *matHeaderCellDef>Id</th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.experiment.id}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"name\">\r\n                        <th mat-header-cell *matHeaderCellDef>Name</th>\r\n                        <td mat-cell *matCellDef=\"let el\">{{el.experiment.name}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"createdOn\">\r\n                        <th mat-header-cell *matHeaderCellDef>Created on</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> {{el.experiment.createdOn | date:'HH:mm:ss, MMM d, yyyy'}}\r\n                        </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"execState\">\r\n                        <th mat-header-cell *matHeaderCellDef>Exec State</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> {{el.experiment.execState}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"code\">\r\n                        <th mat-header-cell *matHeaderCellDef>Code</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> {{el.experiment.code}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"description\">\r\n                        <th mat-header-cell *matHeaderCellDef>Desc</th>\r\n                        <td mat-cell *matCellDef=\"let el\"> {{el.experiment.description}} </td>\r\n                    </ng-container>\r\n\r\n                    <ng-container matColumnDef=\"bts\">\r\n                        <th mat-header-cell *matHeaderCellDef> </th>\r\n                        <td mat-cell *matCellDef=\"let el\">\r\n                            <ng-container [ngTemplateOutlet]=\"actionsTemplate\" [ngTemplateOutletContext]=\"{element:el}\">\r\n                            </ng-container>\r\n                        </td>\r\n                    </ng-container>\r\n\r\n                    <tr mat-header-row=\"mat-header-row\" *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n                    <tr mat-row=\"mat-row\" *matRowDef=\"let row; columns: columnsToDisplay;\"></tr>\r\n                </table>\r\n            </ct-table>\r\n        </ct-section-body-row>\r\n    </ct-section-body>\r\n    <ct-section-footer>\r\n        <ct-section-footer-row>\r\n            <ct-flex justify-content=\"space-between\">\r\n                <ct-flex-item>\r\n                    <ct-table-pagination [pageableDefault]=\"experimentsResult.items\" [globalDisable]=\"false\"\r\n                        (next)=\"nextPage()\" (prev)=\"prevPage()\"></ct-table-pagination>\r\n                </ct-flex-item>\r\n                <ct-flex-item>\r\n                    <ng-container *ngTemplateOutlet=\"addButtonTemplate\"></ng-container>\r\n                </ct-flex-item>\r\n            </ct-flex>\r\n        </ct-section-footer-row>\r\n    </ct-section-footer>\r\n</ct-section>\r\n\r\n\r\n\r\n\r\n\r\n<ng-template #actionsTemplate let-element=\"element\">\r\n    <ct-flex justify-content=\"flex-end\" gap=\"9px\">\r\n        <ct-flex-item *ngIf=\"element.experiment.execState === ExecContextState.NONE\">\r\n            <button mat-flat-button color=\"primary\" size=\"forTableRow\" (click)=\"produce(element)\">Produce</button>\r\n        </ct-flex-item>\r\n        <ct-flex-item\r\n            *ngIf=\"element.experiment.execState === ExecContextState.PRODUCED || element.experiment.execState === ExecContextState.STOPPED\">\r\n            <button mat-flat-button color=\"primary\" size=\"forTableRow\" (click)=\"start(element)\">Start</button>\r\n        </ct-flex-item>\r\n        <ct-flex-item *ngIf=\"element.experiment.execState === ExecContextState.STARTED\">\r\n            <button mat-flat-button color=\"primary\" size=\"forTableRow\" (click)=\"stop(element)\">Stop</button>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <a mat-flat-button [routerLink]=\"[element.experiment.id, 'edit']\" color=\"primary\"\r\n                size=\"forTableRow\">Edit</a>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <a mat-flat-button\r\n                [routerLink]=\"[element.experiment.id,'source-code',element.experiment.sourceCodeId,'exec-context',element.experiment.execContextId, 'state']\"\r\n                color=\"primary\" size=\"forTableRow\">Task\r\n                State</a>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <button mat-flat-button size=\"forTableRow\" color=\"primary\" (click)=\"clone(element)\">Clone</button>\r\n        </ct-flex-item>\r\n        <ct-flex-item>\r\n            <button mat-flat-button size=\"forTableRow\" color=\"warn\" (click)=\"delete(element)\">\r\n                <mat-icon>delete</mat-icon>\r\n            </button>\r\n        </ct-flex-item>\r\n    </ct-flex>\r\n</ng-template>\r\n\r\n\r\n\r\n\r\n\r\n<ng-template #addButtonTemplate>\r\n    <button mat-flat-button color=\"primary\" wide=\"wide\" [disabled]=\"isLoading\" routerLink=\"add\">Add\r\n        Experiment</button>\r\n</ng-template>","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { ConfirmationDialogMethod } from '@app/components/app-dialog-confirmation/app-dialog-confirmation.component';\r\nimport { ExecContextState } from '@src/app/enums/ExecContextState';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\nimport { ExperimentApiData } from '@src/app/services/experiments/ExperimentApiData';\r\nimport { ExperimentsService } from '@src/app/services/experiments/experiments.service';\r\n\r\n@Component({\r\n    selector: 'experiments-view',\r\n    templateUrl: './experiments.component.html',\r\n    styleUrls: ['./experiments.component.scss']\r\n})\r\n\r\nexport class ExperimentsComponent extends UIStateComponent implements OnInit {\r\n    ExecContextState: typeof ExecContextState = ExecContextState;\r\n    experimentsResult: ExperimentApiData.ExperimentsResult;\r\n    dataSource: MatTableDataSource<ExperimentApiData.ExperimentResult> = new MatTableDataSource<ExperimentApiData.ExperimentResult>([]);\r\n    columnsToDisplay: string[] = ['id', 'name', 'createdOn', 'code', 'description', 'execState', 'bts'];\r\n\r\n    constructor(\r\n        readonly dialog: MatDialog,\r\n        private experimentsService: ExperimentsService,\r\n        readonly authenticationService: AuthenticationService\r\n\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.updateTable(0);\r\n    }\r\n\r\n    updateTable(page: number): void {\r\n        this.setIsLoadingStart();\r\n        this.experimentsService\r\n            .getExperiments(page.toString())\r\n            .subscribe({\r\n                next: experimentsResult => {\r\n                    this.experimentsResult = experimentsResult;\r\n                    this.dataSource = new MatTableDataSource(experimentsResult.items.content || []);\r\n                },\r\n                complete: () => {\r\n                    this.setIsLoadingEnd();\r\n                }\r\n            });\r\n    }\r\n\r\n    @ConfirmationDialogMethod({\r\n        question: (experiment: ExperimentApiData.ExperimentResult): string =>\r\n            `Do you want to delete Experiment\\xa0#${experiment.experiment.id}`,\r\n        rejectTitle: 'Cancel',\r\n        resolveTitle: 'Delete'\r\n    })\r\n    delete(experiment: ExperimentApiData.ExperimentResult): void {\r\n        this.experimentsService\r\n            .deleteCommit(experiment.experiment.id.toString())\r\n            .subscribe({\r\n                complete: () => this.updateTable(this.experimentsResult.items.number)\r\n            });\r\n    }\r\n\r\n    clone(element: ExperimentApiData.ExperimentResult): void {\r\n        this.experimentsService\r\n            .experimentCloneCommit(element.experiment.id?.toString())\r\n            .subscribe({\r\n                complete: () => this.updateTable(this.experimentsResult.items.number)\r\n            });\r\n    }\r\n\r\n    produce(experiment: ExperimentApiData.ExperimentResult): void {\r\n        this.execContextTargetExecState(experiment.experiment.id.toString(), ExecContextState.PRODUCED.toLowerCase());\r\n    }\r\n\r\n    start(experiment: ExperimentApiData.ExperimentResult): void {\r\n        this.execContextTargetExecState(experiment.experiment.id.toString(), ExecContextState.STARTED.toLowerCase());\r\n    }\r\n\r\n    stop(experiment: ExperimentApiData.ExperimentResult): void {\r\n        this.execContextTargetExecState(experiment.experiment.id.toString(), ExecContextState.STOPPED.toLowerCase());\r\n    }\r\n\r\n    private execContextTargetExecState(id: string, state: string): void {\r\n        this.experimentsService\r\n            .execContextTargetExecState(id, state)\r\n            .subscribe({\r\n                complete: () => this.updateTable(this.experimentsResult.items.number)\r\n            });\r\n    }\r\n\r\n    nextPage(): void {\r\n        this.updateTable(this.experimentsResult.items.number + 1);\r\n    }\r\n\r\n    prevPage(): void {\r\n        this.updateTable(this.experimentsResult.items.number - 1);\r\n    }\r\n\r\n}","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { MaterialAppModule } from '@src/app/ngmaterial.module';\r\nimport { ExperimentAddComponent } from './experiment-add/experiment-add.component';\r\nimport { ExperimentEditComponent } from './experiment-edit/experiment-edit.component';\r\nimport { ExperimentsComponent } from './experiments/experiments.component';\r\nimport { CtModule } from '../ct/ct.module';\r\nimport { ExperimentStateComponent } from './experiment-state/experiment-state.component';\r\n\r\n\r\n\r\nexport const ExperimentsRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ExperimentsComponent\r\n    },\r\n    {\r\n        path: 'add',\r\n        component: ExperimentAddComponent,\r\n        data: {\r\n            backConfig: ['../']\r\n        }\r\n    },\r\n    {\r\n        path: ':experimentId/edit',\r\n        component: ExperimentEditComponent,\r\n        data: {\r\n            backConfig: ['../', '../']\r\n        }\r\n    },\r\n    {\r\n        path: ':experimentId/source-code/:sourceCodeId/exec-context/:execContextId/state',\r\n        component: ExperimentStateComponent,\r\n        data: {\r\n            backConfig: ['../', '../', '../', '../', '../', '../']\r\n        }\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(ExperimentsRoutes)],\r\n    exports: [RouterModule],\r\n    declarations: []\r\n})\r\nexport class ExperimentsRoutingModule { }\r\n\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        ExperimentsRoutingModule,\r\n        CtModule,\r\n        MaterialAppModule,\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        TranslateModule.forChild({})\r\n    ],\r\n    declarations: [\r\n        ExperimentsComponent,\r\n        ExperimentAddComponent,\r\n        ExperimentEditComponent,\r\n        ExperimentStateComponent\r\n    ]\r\n})\r\nexport class ExperimentsModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { ExperimentApiData } from '@src/app/services/experiments/ExperimentApiData';\r\nimport { ExperimentsService } from '@src/app/services/experiments/experiments.service';\r\nimport { SimpleExperiment } from '@src/app/services/experiments/SimpleExperiment';\r\nimport { UIStateComponent } from '@src/app/models/UIStateComponent';\r\nimport { AuthenticationService } from '@src/app/services/authentication';\r\n\r\n@Component({\r\n    selector: 'experiment-edit',\r\n    templateUrl: './experiment-edit.component.html',\r\n    styleUrls: ['./experiment-edit.component.scss']\r\n})\r\n\r\nexport class ExperimentEditComponent extends UIStateComponent implements OnInit {\r\n\r\n    experimentsEditResult: ExperimentApiData.ExperimentsEditResult;\r\n    operationStatusRest: OperationStatusRest;\r\n\r\n    simpleExperiment: SimpleExperiment = {\r\n        name: null,\r\n        description: null,\r\n        code: null,\r\n        id: null\r\n    };\r\n\r\n    constructor(\r\n        private route: ActivatedRoute,\r\n        private experimentsService: ExperimentsService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        readonly authenticationService: AuthenticationService\r\n    ) {\r\n        super(authenticationService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.setIsLoadingStart();\r\n        this.simpleExperiment.id = this.route.snapshot.paramMap.get('experimentId');\r\n        this.experimentsService\r\n            .edit(this.route.snapshot.paramMap.get('experimentId'))\r\n            .subscribe({\r\n                next: experimentsEditResult => {\r\n                    this.experimentsEditResult = experimentsEditResult;\r\n                    this.simpleExperiment.code = experimentsEditResult.simpleExperiment.code;\r\n                    this.simpleExperiment.description = experimentsEditResult.simpleExperiment.description;\r\n                    this.simpleExperiment.name = experimentsEditResult.simpleExperiment.name;\r\n                },\r\n                complete: () => {\r\n                    this.setIsLoadingEnd();\r\n                }\r\n            });\r\n    }\r\n\r\n    save(): void {\r\n        this.setIsLoadingStart();\r\n        this.experimentsService\r\n            .editFormCommit(this.simpleExperiment)\r\n            .subscribe({\r\n                next: operationStatusRest => this.operationStatusRest = operationStatusRest,\r\n                complete: () => this.setIsLoadingEnd()\r\n            });\r\n    }\r\n\r\n    back(): void {\r\n        this.router.navigate(['../../'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n}","<ct-cols *ngIf=\"experimentsEditResult\">\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>Experiment #{{simpleExperiment.id}}</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Name</mat-label>\r\n                        <input matInput=\"matInput\" autocomplete=\"off\" [(ngModel)]=\"simpleExperiment.name\" />\r\n                        <mat-hint>This is a required field. </mat-hint>\r\n                    </mat-form-field>\r\n                </ct-section-body-row>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Description</mat-label>\r\n                        <textarea matInput=\"matInput\" cdkTextareaAutosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"5\"\r\n                            [(ngModel)]=\"simpleExperiment.description\"></textarea>\r\n                        <mat-hint>This is a required field. </mat-hint>\r\n                    </mat-form-field>\r\n                </ct-section-body-row>\r\n                <ct-section-body-row>\r\n                    <mat-form-field appearance=\"outline\">\r\n                        <mat-label>Experiment code</mat-label>\r\n                        <textarea matInput=\"matInput\" cdkTextareaAutosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"5\"\r\n                            [(ngModel)]=\"simpleExperiment.code\"></textarea>\r\n                        <mat-hint>This is a required field. </mat-hint>\r\n                    </mat-form-field>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"back()\" title=\"Cancel\">\r\n                                Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" (click)=\"save()\" color=\"primary\"\r\n                                [disabled]=\"isLoading\" title=\"Save\">Save</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ExperimentsService } from '@app/services/experiments/experiments.service';\r\nimport { OperationStatus } from '@src/app/enums/OperationStatus';\r\nimport { OperationStatusRest } from '@src/app/models/OperationStatusRest';\r\nimport { SourceCodeUidsForCompany } from '@src/app/services/source-codes/SourceCodeUidsForCompany';\r\n@Component({\r\n    selector: 'experiment-add',\r\n    templateUrl: './experiment-add.component.html',\r\n    styleUrls: ['./experiment-add.component.scss']\r\n})\r\n\r\nexport class ExperimentAddComponent implements OnInit {\r\n    form: FormGroup = new FormGroup({\r\n        sourceCodeUID: new FormControl('', [Validators.required, Validators.minLength(1)]),\r\n        name: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n        description: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n        experimentCode: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n    });\r\n    operationStatusRest: OperationStatusRest;\r\n    sourceCodeUidsForCompany: SourceCodeUidsForCompany;\r\n\r\n    constructor(\r\n        private experimentsService: ExperimentsService,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.experimentsService\r\n            .experimentAdd()\r\n            .subscribe({\r\n                next: (sourceCodeUidsForCompany) => {\r\n                    this.sourceCodeUidsForCompany = sourceCodeUidsForCompany;\r\n                }\r\n            });\r\n    }\r\n\r\n    cancel(): void {\r\n        this.router.navigate(['../'], { relativeTo: this.activatedRoute });\r\n    }\r\n\r\n    create(): void {\r\n        this.experimentsService\r\n            .addFormCommit(\r\n                this.form.value.sourceCodeUID,\r\n                this.form.value.name,\r\n                this.form.value.description,\r\n                this.form.value.experimentCode\r\n            )\r\n            .subscribe({\r\n                next: (operationStatusRest) => {\r\n                    this.operationStatusRest = operationStatusRest;\r\n                    if (operationStatusRest.status === OperationStatus.OK) {\r\n                        this.form.reset();\r\n                    }\r\n                }\r\n            });\r\n    }\r\n}","<ct-cols>\r\n    <ct-col size=\"6\">\r\n        <ct-section>\r\n            <ct-section-header>\r\n                <ct-section-header-row>\r\n                    <ct-heading>New Experiment</ct-heading>\r\n                </ct-section-header-row>\r\n            </ct-section-header>\r\n            <ct-section-body>\r\n                <ct-section-body-row>\r\n                    <form [formGroup]=\"form\" novalidate=\"novalidate\">\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>List of Uids of source codes</mat-label>\r\n                            <mat-select formControlName=\"sourceCodeUID\">\r\n                                <div *ngFor=\"let sourceCode of sourceCodeUidsForCompany?.items\">\r\n                                    <mat-option [value]=\"sourceCode.uid\">{{sourceCode.uid}}</mat-option>\r\n                                </div>\r\n                            </mat-select>\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Name</mat-label>\r\n                            <input matInput=\"matInput\" formControlName=\"name\" />\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Description</mat-label>\r\n                            <textarea matInput=\"matInput\" formControlName=\"description\"\r\n                                cdkTextareaAutosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"5\"></textarea>\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                        <br>\r\n                        <br>\r\n                        <mat-form-field appearance=\"outline\">\r\n                            <mat-label>Experiment code</mat-label>\r\n                            <textarea matInput=\"matInput\" formControlName=\"experimentCode\"\r\n                                cdkTextareaAutosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"5\"></textarea>\r\n                            <mat-hint>This is a required field.</mat-hint>\r\n                        </mat-form-field>\r\n                    </form>\r\n                </ct-section-body-row>\r\n            </ct-section-body>\r\n            <ct-section-footer>\r\n                <ct-section-footer-row>\r\n                    <ct-flex justify-content=\"flex-end\" gap=\"8px\">\r\n                        <ct-flex-item>\r\n                            <button mat-stroked-button=\"mat-stroked-button\" (click)=\"cancel()\">Cancel</button>\r\n                        </ct-flex-item>\r\n                        <ct-flex-item>\r\n                            <button mat-flat-button=\"mat-flat-button\" (click)=\"create()\" color=\"primary\"\r\n                                [disabled]=\"form.invalid\">Create</button>\r\n                        </ct-flex-item>\r\n                    </ct-flex>\r\n                </ct-section-footer-row>\r\n            </ct-section-footer>\r\n        </ct-section>\r\n    </ct-col>\r\n    <ct-col size=\"6\">\r\n        <ct-rest-status [content]=\"operationStatusRest\"></ct-rest-status>\r\n    </ct-col>\r\n</ct-cols>"]}